"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Title Page i","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","1","1","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00001","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174173","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Title Page iii","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","3","3","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00002","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174046","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Copyright Page","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","4","4","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00003","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173936","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Table of Contents","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","5","13","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00004","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174203","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 General and Program Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","14","16","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00005","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174047","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Data and Tool Showcase Track Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","17","17","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00006","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173971","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Industry Track Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","18","18","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00007","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174204","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Mining Challenge Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","19","21","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00008","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174142","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Registered Reports Track Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","22","22","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00009","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174068","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Junior PC Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","23","24","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00010","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173862","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Tutorials Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","25","25","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00011","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174014","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Message from the MSR 2023 Vision and Reflection Co-Chairs","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","26","26","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00012","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174054","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Organizing Committee","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","27","28","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00013","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174089","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Program Committee","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","29","36","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00014","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174212","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Understanding the Time to First Response in GitHub Pull Requests","K. A. Hasan; M. Macedo; Y. Tian; B. Adams; S. Ding","School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada; School of Computing, Queen’s University, Kingston, ON, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","1","11","The pull-based development is widely adopted in modern open-source software (OSS) projects, where developers propose changes to the codebase by submitting a pull request (PR). However, due to many reasons, PRs in OSS projects frequently experience delays across their lifespan, including prolonged waiting times for the first response. Such delays may significantly impact the efficiency and productivity of the development process, as well as the retention of new contributors as long-term contributors.In this paper, we conduct an exploratory study on the time-to-first-response for PRs by analyzing 111,094 closed PRs from ten popular OSS projects on GitHub. We find that bots frequently generate the first response in a PR, and significant differences exist in the timing of bot-generated versus human-generated first responses. We then perform an empirical study to examine the characteristics of bot- and human-generated first responses, including their relationship with the PR’s lifetime. Our results suggest that the presence of bots is an important factor contributing to the time-to-first-response in the pull-based development paradigm, and hence should be separately analyzed from human responses. We also report the characteristics of PRs that are more likely to experience long waiting for the first human-generated response. Our findings have practical implications for newcomers to understand the factors contributing to delays in their PRs.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00015","Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173964","pull request;first response;latency analysis;fine-grained analysis;code review","Productivity;Focusing;Chatbots;Delays;Time factors;Data mining;Open source software","","3","","32","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Dealing with Popularity Bias in Recommender Systems for Third-party Libraries: How far Are We?","P. T. Nguyen; R. Rubei; J. Di Rocco; C. Di Sipio; D. Di Ruscio; M. Di Penta","Università Degli Studi Dell’Aquila, Italy; Università Degli Studi Dell’Aquila, Italy; Università Degli Studi Dell’Aquila, Italy; Università Degli Studi Dell’Aquila, Italy; Università Degli Studi Dell’Aquila, Italy; Università Degli Studi Dell’Aquila, Italy",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","12","24","Recommender systems for software engineering (RSSEs) assist software engineers in dealing with a growing information overload when discerning alternative development solutions. While RSSEs are becoming more and more effective in suggesting handy recommendations, they tend to suffer from popularity bias, i.e., favoring items that are relevant mainly because several developers are using them. While this rewards artifacts that are likely more reliable and well-documented, it would also mean that missing artifacts are rarely used because they are very specific or more recent. This paper studies popularity bias in Third-Party Library (TPL) RSSEs. First, we investigate whether state-of-the-art research in RSSEs has already tackled the issue of popularity bias. Then, we quantitatively assess four existing TPL RSSEs, exploring their capability to deal with the recommendation of popular items. Finally, we propose a mechanism to defuse popularity bias in the recommendation list. The empirical study reveals that the issue of dealing with popularity in TPL RSSEs has not received adequate attention from the software engineering community. Among the surveyed work, only one starts investigating the issue, albeit getting a low prediction performance.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00016","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174041","Recommender systems;Third-party libraries;Popularity bias;Fairness","Software;Libraries;Reliability;Data mining;Recommender systems;Software engineering","","3","","57","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Improving Agile Planning for Reliable Software Delivery","J. Pasuksmit; F. Jiang; K. Thornton; A. Friedman; N. Fuksmane; I. Kohout; J. Connor","Atlassian, Sydney, Australia; Atlassian, Sydney, Australia; Atlassian, Sydney, Australia; Atlassian, Sydney, Australia; Atlassian, Sydney, Australia; Atlassian, Sydney, Australia; Atlassian, Sydney, Australia",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","25","26","Agile software development prioritizes the delivery of working software. However, there are challenges in the sprint planning process that could impact the reliability of sprint delivery. In this paper, we list three challenges related to the sprint planning process. We also discuss future work directions to facilitate the sprint planning process and mitigate those challenges for software teams.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00017","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174096","agile;sprint;planning;delivery;uncertainty;bottleneck;Atlassian","Agile software development;Software;Planning;Software reliability;Data mining","","","","14","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Characterizing and Understanding Software Security Vulnerabilities in Machine Learning Libraries","N. S. Harzevili; J. Shin; J. Wang; S. Wang; N. Nagappan","Lassonde School of Engineering, York University, Toronto, Canada; Lassonde School of Engineering, York University, Toronto, Canada; Institute of Software Chinese Academy of Sciences, Beijing, China; Lassonde School of Engineering, York University, Toronto, Canada; IIIT Delhi, New Delhi, India",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","27","38","The application of machine learning (ML) libraries has tremendously increased in many domains, including autonomous driving systems, medical, and critical industries. Vulnerabilities of such libraries could result in irreparable consequences. However, the characteristics of software security vulnerabilities have not been well studied. In this paper, to bridge this gap, we take the first step toward characterizing and understanding the security vulnerabilities of seven well-known ML libraries, including TensorFlow, PyTorch, Scikit-learn, Mlpack, Pandas, Numpy, and Scipy. To do so, we collected 683 security vulnerabilities to explore four major factors: 1) vulnerability types, 2) root causes, 3) symptoms, and 4) fixing patterns of security vulnerabilities in the studied ML libraries. The findings of this study can help developers and researchers understand the characteristics of security vulnerabilities across the studied ML libraries.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00018","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173858","Security vulnerability;machine learning libraries;empirical study","Industries;Machine learning;Debugging;Reliability engineering;Libraries;Software;Software reliability","","17","","52","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"AutoML from Software Engineering Perspective: Landscapes and Challenges","C. Wang; Z. Chen; M. Zhou","School of Computer Science, Peking University, Beijing, China; University College London, London, United Kingdom; School of Computer Science, Peking University, Beijing, China",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","39","51","Machine learning (ML) has been widely adopted in modern software, but the manual configuration of ML (e.g., hyper-parameter configuration) poses a significant challenge to software developers. Therefore, automated ML (AutoML), which seeks the optimal configuration of ML automatically, has received increasing attention from the software engineering community. However, to date, there is no comprehensive understanding of how AutoML is used by developers and what challenges developers encounter in using AutoML for software development. To fill this knowledge gap, we conduct the first study on understanding the use and challenges of AutoML from software developers’ perspective. We collect and analyze 1,554 AutoML downstream repositories, 769 AutoML-related Stack Overflow questions, and 1,437 relevant GitHub issues. The results suggest the increasing popularity of AutoML in a wide range of topics, but also the lack of relevant expertise. We manually identify specific challenges faced by developers for AutoML-enabled software. Based on the results, we derive a series of implications for AutoML framework selection, framework development, and research.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00019","National Natural Science Foundation of China; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173951","AutoML;software engineering;application;challenge","Manuals;Machine learning;Market research;Software;Data mining;Software engineering;Software development management","","9","","110","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"DeepScenario: An Open Driving Scenario Dataset for Autonomous Driving System Testing","C. Lu; T. Yue; S. Ali","Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo, Norway",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","52","56","With the rapid development of autonomous driving systems (ADSs), testing ADSs under various environmental conditions has become a key method to ensure the successful deployment of ADS in the real world. However, it is impossible to test all the scenarios due to the inherent complexity and uncertainty of ADSs and the driving tasks. Further, testing of ADSs is expensive regarding time and computational resources. Therefore, a large-scale driving scenario dataset consisting of various driving conditions is needed. To this end, we present an open driving scenario dataset DeepScenario, containing over 30K executable driving scenarios, which are collected by 2880 test executions of three driving scenario generation strategies. Each scenario in the dataset is labeled with six attributes characterizing test results. We further show the attribute statistics and distribution of driving scenarios. For example, there are 1050 collision scenarios, in 917 scenarios there were collisions with other vehicles, 105 and 28 with pedestrians and static obstacles, respectively. Target users include ADS developers who need to validate their systems under various environmental conditions.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00020","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174023","autonomous driving system testing;driving scenario;open source;dataset","System testing;Uncertainty;Pedestrians;Software;Complexity theory;Data mining;Task analysis","","10","","19","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"PTMTorrent: A Dataset for Mining Open-source Pre-trained Model Packages","W. Jiang; N. Synovic; P. Jajal; T. R. Schorlemmer; A. Tewari; B. Pareek; G. K. Thiruvathukal; J. C. Davis","Purdue University; Loyola University, Chicago; Purdue University; Purdue University; Purdue University; Purdue University; Loyola University, Chicago; Purdue University",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","57","61","Due to the cost of developing and training deep learning models from scratch, machine learning engineers have begun to reuse pre-trained models (PTMs) and fine-tune them for downstream tasks. PTM registries known as “model hubs” support engineers in distributing and reusing deep learning models. PTM packages include pre-trained weights, documentation, model architectures, datasets, and metadata. Mining the information in PTM packages will enable the discovery of engineering phenomena and tools to support software engineers. However, accessing this information is difficult — there are many PTM registries, and both the registries and the individual packages may have rate limiting for accessing the data.We present an open-source dataset, PTMTorrent, to facilitate the evaluation and understanding of PTM packages. This paper describes the creation, structure, usage, and limitations of the dataset. The dataset includes a snapshot of 5 model hubs and a total of 15,913 PTM packages. These packages are represented in a uniform data schema for cross-hub mining. We describe prior uses of this data and suggest research opportunities for mining using our dataset.The PTMTorrent dataset (v1) is available at: https://app.globus.org/file-manager?origin_id=55e17a6e-9d8f-11ed-a2a2-8383522b48d9&origin_path=%2F%7E%2F.Our dataset generation tools are available on GitHub: https://doi.org/10.5281/zenodo.7570357","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00021","Google; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173952","Open-Source Software;Data Mining;Machine learning;Empirical software engineering","Deep learning;Training;Limiting;Documentation;Metadata;Software;Data mining","","7","","47","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"NICHE: A Curated Dataset of Engineered Machine Learning Projects in Python","R. Widyasari; Z. Yang; F. Thung; S. Qin Sim; F. Wee; C. Lok; J. Phan; H. Qi; C. Tan; Q. Tay; D. Lo","School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University; School of Computing and Information System, Singapore Management University",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","62","66","Machine learning (ML) has gained much attention and has been incorporated into our daily lives. While there are numerous publicly available ML projects on open source platforms such as GitHub, there have been limited attempts in filtering those projects to curate ML projects of high quality. The limited availability of such a high-quality dataset poses an obstacle to understanding ML projects. To help clear this obstacle, we present NICHE, a manually labelled dataset consisting of 572 ML projects. Based on the evidence of good software engineering practices, we label 441 of these projects as engineered and 131 as non-engineered. This dataset can help researchers understand the practices that are adopted in high-quality ML projects. It can also be used as a benchmark for classifiers designed to identify engineered ML projects.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00022","Ministry of Education; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174042","Engineered Software Project;Machine Learning;Python;Open Source Projects","Filtering;Machine learning;Benchmark testing;Software;Data mining;Software engineering;Software development management","","5","","24","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Evaluating Software Documentation Quality","H. Tang; S. Nadi",University of Alberta; University of Alberta,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","67","78","The documentation of software libraries is an essential resource for learning how to use the library. Bad documentation may demotivate a developer from using the library or may result in incorrect usage of the library. Therefore, as developers select which libraries to use and learn, it would be beneficial to know the quality of the available documentation. In this paper, we follow a systematic process to create an automatic documentation quality evaluation tool. We identify several documentation quality aspects from the literature and design metrics that measure these aspects. We design a documentation quality overview visualization to visualize and present these metrics, and receive intermediate feedback through a focused interview study. Based on the received feedback, we implement a prototype for a web service that can evaluate a given documentation page for Java, JavaScript, and Python libraries. We use this web service to conduct a survey with 26 developers where we evaluate the usefulness of our metrics as well as whether they reflect developers’ experiences when using this library. Our results show that participants rated most of our metrics highly, with Text Readability, and Code Readability (of examples) receiving the highest ratings. We also found several libraries where our evaluation reflected developers’ experiences using the library, indicating the accuracy of our metrics.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00023","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173973","","Measurement;Surveys;Visualization;Codes;Systematics;Web services;Prototypes","","5","","64","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"What Do Users Ask in Open-Source AI Repositories? An Empirical Study of GitHub Issues","Z. Yang; C. Wang; J. Shi; T. Hoang; P. Kochhar; Q. Lu; Z. Xing; D. Lo","Singapore Management University, Singapore; Singapore Management University, Singapore; Singapore Management University, Singapore; Data61, Eveleigh, CSIRO, Sydney, Australia; Microsoft Research, Vancouver, Canada; Data61, Eveleigh, CSIRO, Sydney, Australia; Singapore Management University, Singapore; Singapore Management University, Singapore",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","79","91","Artificial Intelligence (AI) systems, which benefit from the availability of large-scale datasets and increasing computational power, have become effective solutions to various critical tasks, such as natural language understanding, speech recognition, and image processing. The advancement of these AI systems is inseparable from open-source software (OSS). Specifically, many benchmarks, implementations, and frameworks for constructing AI systems are made open source and accessible to the public, allowing researchers and practitioners to reproduce the reported results and broaden the application of AI systems. The development of AI systems follows a data-driven paradigm and is sensitive to hyperparameter settings and data separation. Developers may encounter unique problems when employing open-source AI repositories.This paper presents an empirical study that investigates the issues in the repositories of open-source AI repositories to assist developers in understanding problems during the process of employing AI systems. We collect 576 repositories from the PapersWithCode platform. Among these repositories, we find 24,953 issues by utilizing GitHub REST APIs. Our empirical study includes three phases. First, we manually analyze these issues to categorize the problems that developers are likely to encounter in open-source AI repositories. Specifically, we provide a taxonomy of 13 categories related to AI systems. The two most common issues are runtime errors (23.18%) and unclear instructions (19.53%). Second, we see that 67.5% of issues are closed. We also find that half of these issues resolve within four days. Moreover, issue management features, e.g., label and assign, are not widely adopted in open-source AI repositories. In particular, only 7.81% and 5.9% of repositories label issues and assign these issues to assignees, respectively. Finally, we empirically show that employing GitHub issue management features and writing issues with detailed descriptions facilitate the resolution of issues. Based on our findings, we make recommendations for developers to help better manage the issues of open-source AI repositories and improve their quality.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00024","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174191","Open Source Software;Mining Software Repository;Best Development Practices;AI Repositories","Runtime;Image processing;Taxonomy;Speech recognition;Writing;Natural language processing;Artificial intelligence","","13","","70","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Picaso: Enhancing API Recommendations with Relevant Stack Overflow Posts","I. Clairine Irsan; T. Zhang; F. Thung; K. Kim; D. Lo","School of Computing and Information Systems, Singapore Management University; School of Computing and Information Systems, Singapore Management University; School of Computing and Information Systems, Singapore Management University; School of Computing and Information Systems, Singapore Management University; School of Computing and Information Systems, Singapore Management University",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","92","103","While having options could be liberating, too many options could lead to the sub-optimal solution being chosen. This is not an exception in the software engineering domain. Nowadays, API has become imperative in making software developers’ life easier. APIs help developers implement a function faster and more efficiently. However, given the large number of open-source libraries to choose from, choosing the right APIs is not a simple task. Previous studies on API recommendation leverage natural language (query) to identify which API would be suitable for the given task. However, these studies only consider one source of input, i.e., GitHub or Stack Overflow, independently. There are no existing approaches that utilize Stack Overflow to help generate better API sequence recommendations from queries obtained from GitHub. Therefore, in this study, we aim to provide a framework that could improve the result of the API sequence recommendation by leveraging information from Stack Overflow. In this work, we propose Picaso, which leverages contrastive learning to train a sentence embedding model and a cross-encoder model to build a classification model in order to find a semantically similar Stack Overflow post given an annotation (i.e., code comment). Subsequently, Picaso then uses the Stack Overflow’s title as a query expansion. Picaso then uses the extended queries to fine-tune a CodeBERT, resulting in an API sequence generation model. Based on our experiments, we found that incorporating the Stack Overflow information into CodeBERT would improve the performance of API sequence generation’s BLEU-4 score by 10.8%.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00025","Ministry of Education; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174238","API recommendation;Multi-source analytics;Sequence Generation;Pre-trained Models;Stack Overflow;Query Expansion","Analytical models;Codes;Annotations;Natural languages;Software;Libraries;Data mining","","2","","37","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"GIRT-Data: Sampling GitHub Issue Report Templates","N. Nikeghbal; A. Hossein Kargaran; A. Heydarnoori; H. Schütze","Sharif University of Technology; CIS, LMU Munich; Bowling Green State University; CIS, LMU Munich",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","104","108","GitHub’s issue reports provide developers with valuable information that is essential to the evolution of a software development project. Contributors can use these reports to perform software engineering tasks like submitting bugs, requesting features, and collaborating on ideas. In the initial versions of issue reports, there was no standard way of using them. As a result, the quality of issue reports varied widely. To improve the quality of issue reports, GitHub introduced issue report templates (IRTs), which pre-fill issue descriptions when a new issue is opened. An IRT usually contains greeting contributors, describing project guidelines, and collecting relevant information. However, despite of effectiveness of this feature which was introduced in 2016, only nearly 5% of GitHub repositories (with more than 10 stars) utilize it. There are currently few articles on IRTs, and the available ones only consider a small number of repositories.In this work, we introduce GIRT-DATA, the first and largest dataset of IRTs in both YAML and Markdown format. This dataset and its corresponding open-source crawler tool are intended to support research in this area and to encourage more developers to use IRTs in their repositories. The stable version of the dataset contains 1,084,300 repositories and 50,032 of them support IRTs. The stable version of the dataset and crawler is available here: https://github.com/kargaranamir/girt-data","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00026","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174016","Issue Report Template;Issue Template;GitHub;Issue Tracker;Bug Report","Crawlers;Computer bugs;Stars;Software;Data mining;Task analysis;Standards","","5","","47","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"TypeScript’s Evolution: An Analysis of Feature Adoption Over Time","J. D. Scarsbrook; M. Utting; R. K. L. Ko","School of Information Technology and Electrical Engineering, The University of Queensland, Brisbane, Australia; School of Information Technology and Electrical Engineering, The University of Queensland, Brisbane, Australia; School of Information Technology and Electrical Engineering, The University of Queensland, Brisbane, Australia",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","109","114","TypeScript is a quickly evolving superset of JavaScript with active development of new features. Our paper seeks to understand how quickly these features are adopted by the developer community. Existing work in JavaScript shows the adoption of dynamic language features can be a major hindrance to static analysis. As TypeScript evolves the addition of features makes the underlying standard more and more difficult to keep up with. In our work we present an analysis of 454 open source TypeScript repositories and study the adoption of 13 language features over the past three years. We show that while new versions of the TypeScript compiler are aggressively adopted by the community, the same cannot be said for language features. While some experience strong growth others are rarely adopted by projects. Our work serves as a starting point for future study of the adoption of features in TypeScript. We also release our analysis and data gathering software as open source in the hope it helps the programming languages community.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00027","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174097","TypeScript;JavaScript;Data Mining","Computer languages;Codes;Ecosystems;Static analysis;Software;Data mining;Standards","","3","","19","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"DGMF: Fast Generation of Comparable, Updatable Dependency Graphs for Software Repositories","T. Litzenberger; J. Düsing; B. Hermann","TU Dortmund, Dortmund, Germany; TU Dortmund, Dortmund, Germany; TU Dortmund, Dortmund, Germany",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","115","119","Dependency graphs for software repositories have been utilized in a variety of different research contexts. However, to this date there is no unified data model for such graphs, often prompting researchers to implement domain-specific methodologies from scratch. This greatly hinders comparability and makes it hard to incorporate existing tooling into new contexts. With this work we propose DGMF, a framework for mining dependency graphs via repository-specific, user-defined adapters. DGMF is designed to be fast, to require little repository-specific code, and to produce graphs that are comparable even across different repositories. We present our design and implementation, as well as three predefined adapters and an evaluation.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00028","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173998","dependency graphs;repository mining;maven;npm;python","Codes;Ecosystems;Software;Data models;Data mining;Indexes;Software development management","","3","","21","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Enabling Analysis and Reasoning on Software Systems through Knowledge Graph Representation","S. A. Rukmono; M. R. V. Chaudron","Mathematics and Computer Science, Eindhoven University of Technology, Eindhoven, The Netherlands; Mathematics and Computer Science, Eindhoven University of Technology, Eindhoven, The Netherlands",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","120","124","This work presents a knowledge-representation-based approach for analysing software systems. Its main components are: a generic and extensible knowledge model, and a knowledge extractor tool that generates instance-level knowledge graphs from software repositories (currently Java). Our knowledge model can be used as a shared data-model in a software analysis pipeline. We illustrate the potential uses of our knowledge representation by performing experimental architecture recovery and identifying design pattern instance. We intend to use our ontology and extraction tool as a partial foundation for automated reasoning on software systems.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00029","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174249","knowledge graph;software knowledge;software ontology;object-oriented;software analysis","Java;Analytical models;Knowledge based systems;Pipelines;Knowledge graphs;Computer architecture;Ontologies","","3","","26","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"microSecEnD: A Dataset of Security-Enriched Dataflow Diagrams for Microservice Applications","S. Schneider; T. Özen; M. Chen; R. Scandariato","Hamburg University of Technology, Hamburg, Germany; Hamburg University of Technology, Hamburg, Germany; Hamburg University of Technology, Hamburg, Germany; Hamburg University of Technology, Hamburg, Germany",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","125","129","Dataflow diagrams (DFDs) are useful resources in securing applications since they show a software system’s architecture and allow assessing architectural security and weaknesses. Enriching them with annotations about implemented security features further strengthens this ability. This is especially true for microservice applications, as their most pressing security concerns stem from their separation into multiple services. Researchers need data to work on these issues and enhance microservices’ architectural security. In this work, we present microSecEnD, a dataset of 17 manually created DFDs that are extensively annotated with information on implemented security features. We provide traceability for all model items. Further, a mapping to a list of 17 architectural security best-practices is provided. Finally, for each best-practice that an application violates, we present a model variant that does adhere to it.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00030","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174132","microservices;security;dataflow diagrams;dataset","Annotations;Microservice architectures;Pressing;Computer architecture;Software;Security;Data mining","","13","","20","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Wasmizer: Curating WebAssembly-driven Projects on GitHub","A. Nicholson; Q. Stiévenart; A. Mazidi; M. Ghafari","University of Auckland, New Zealand; Université du Québec à Montréal, Canada; TU Clausthal, Germany; TU Clausthal, Germany",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","130","141","WebAssembly has attracted great attention as a portable compilation target for programming languages. To facilitate in-depth studies about this technology, we have deployed Wasmizer, a tool that regularly mines GitHub projects and makes an up-to-date dataset of WebAssembly sources and their binaries publicly available. Presently, we have collected 2540 C and C++ projects that are highly-related to WebAssembly, and built a dataset of 8915 binaries that are linked to their source projects. To demonstrate an application of this dataset, we have investigated the presence of eight WebAssembly compilation smells in the wild.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00031","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174194","WebAssembly;dataset;compilation smells","Computer languages;C++ languages;Software;Data mining;Software development management","","","","20","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Feature Toggle Usage Patterns: A Case Study on Google Chromium","T. Rahman","Gannon University, Erie, PA, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","142","147","Feature toggles control the state of features and allow exposing unfinished features to a reduced cohort of users without affecting the general software operation. It is basically a variable used in if conditions to control the flow of program execution. Since there is no universal standard of using feature toggles established yet, developers write code around feature toggles and use them spontaneously. Certain usage patterns of feature toggles may even lead to code smells. In this short paper I introduce six different toggle usage patterns from Google Chromium and discuss the possible reasons, consequences, and detection methods. I further conduct a mixed-method approach to analyze them. Since this study is still in progress, I report the early results only for the three most commonly appeared usage patterns. I validate the quantitative findings with the qualitative results obtained by interviewing 15 Google developers. I found that there are 3.1K toggles present in 38 components of Chromium. In the median case, nested toggles are shared by 5 different files, spread toggles span 2 different components, and dead toggles cover an average of 4 lines of code (loc).Novel aspects:- Although usage patterns of C pre-processors (#ifdefs) are studied in the past, I did not find any study particularly focusing on the run-time feature toggles usage patterns. Hence, I have been inspired to do an exploratory study to investigate different usage patterns of feature toggles. I chose Google Chromium as a case study at this point since Google developers use feature toggles extensively.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00032","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174200","Fault-prone Component;Random Forest;Fault Prediction;Fault Evolution","Codes;Focusing;Forestry;Chromium;Software;Internet;Data mining","","1","","25","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"On Codex Prompt Engineering for OCL Generation: An Empirical Study","S. Abukhalaf; M. Hamdaqa; F. Khomh","Department of Computer and Software Engineering, Software and Emerging Technologies Lab (SAET), Polytechnique Montréal, Montréal, Canada; Department of Computer and Software Engineering, Software and Emerging Technologies Lab (SAET), Polytechnique Montréal, Montréal, Canada; Department of Computer and Software Engineering, SoftWare Analytics and Technologies Lab (SWAT), Polytechnique Montréal, Montréal, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","148","157","The Object Constraint Language (OCL) is a declarative language that adds constraints and object query expressions to Meta-Object Facility (MOF) models. OCL can provide precision and conciseness to UML models. Nevertheless, the unfamiliar syntax of OCL has hindered its adoption by software practitioners. LLMs, such as GPT-3, have made significant progress in many NLP tasks, such as text generation and semantic parsing. Similarly, researchers have improved on the downstream tasks by fine-tuning LLMs for the target task. Codex, a GPT-3 descendant by OpenAI, has been fine-tuned on publicly available code from GitHub and has proven the ability to generate code in many programming languages, powering the AI-pair programmer Copilot. One way to take advantage of Codex is to engineer prompts for the target downstream task. In this paper, we investigate the reliability of the OCL constraints generated by Codex from natural language specifications. To achieve this, we compiled a dataset of 15 UML models and 168 specifications from various educational resources. We manually crafted a prompt template with slots to populate with the UML information and the target task in the prefix format to complete the template with the generated OCL constraint. We used both zero- and few-shot learning methods in the experiments. The evaluation is reported by measuring the syntactic validity and the execution accuracy metrics of the generated OCL constraints. Moreover, to get insight into how close or natural the generated OCL constraints are compared to human-written ones, we measured the cosine similarity between the sentence embedding of the correctly generated and human-written OCL constraints. Our findings suggest that by enriching the prompts with the UML information of the models and enabling few-shot learning, the reliability of the generated OCL constraints increases. Furthermore, the results reveal a close similarity based on sentence embedding between the generated OCL constraints and the human-written ones in the ground truth, implying a level of clarity and understandability in the generated OCL constraints by Codex.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00033","Canadian Institute for Advanced Research; Science and Engineering Research Council; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173990","Codex;Prompt Engineering;Object Constraint Language (OCL);Code Generation;Large Language Models","Productivity;Codes;Unified modeling language;Semantics;Syntactics;Writing;Reliability engineering","","19","","29","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Cross-Domain Evaluation of a Deep Learning-Based Type Inference System","B. Gruner; T. Sonnekalb; T. S. Heinze; C. -A. Brust","Institute of Data Science, German Aerospace Center, Jena, Germany; Institute of Data Science, German Aerospace Center, Jena, Germany; Gera-Eisenach, Cooperative University, Gera, Germany; Institute of Data Science, German Aerospace Center, Jena, Germany",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","158","169","Optional type annotations allow for enriching dynamic programming languages with static typing features like better Integrated Development Environment (IDE) support, more precise program analysis, and early detection and prevention of type-related runtime errors. Machine learning-based type inference promises interesting results for automating this task. However, the practical usage of such systems depends on their ability to generalize across different domains, as they are often applied outside their training domain.In this work, we investigate Type4Py as a representative of state-of-the-art deep learning-based type inference systems, by conducting extensive cross-domain experiments. Thereby, we address the following problems: class imbalances, out-of-vocabulary words, dataset shifts, and unknown classes.To perform such experiments, we use the datasets Many-Types4Py and CrossDomainTypes4Py. The latter we introduce in this paper. Our dataset enables the evaluation of type inference systems in different domains of software projects and has over 1,000,000 type annotations mined on the platforms GitHub and Libraries. It consists of data from the two domains web development and scientific calculation.Through our experiments, we detect that the shifts in the dataset and the long-tailed distribution with many rare and unknown data types decrease the performance of the deep learning-based type inference system drastically. In this context, we test unsupervised domain adaptation methods and fine-tuning to overcome these issues. Moreover, we investigate the impact of out-of-vocabulary words.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00034","Ministry of Economy; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174049","type inference;dataset;cross-domain;python;long-tailed;out-of-vocabulary;repository mining;deep learning","Training;Runtime;Annotations;Feature extraction;Software;Libraries;Dynamic programming","","1","","53","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Enriching Source Code with Contextual Data for Code Completion Models: An Empirical Study","T. van Dam; M. Izadi; A. van Deursen","Delft University of Technology, Delft, The Netherlands; Delft University of Technology, Delft, The Netherlands; Delft University of Technology, Delft, The Netherlands",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","170","182","Transformer-based pre-trained models have recently achieved great results in solving many software engineering tasks including automatic code completion which is a staple in a developer’s toolkit. While many have striven to improve the code-understanding abilities of such models, the opposite – making the code easier to understand – has not been properly investigated. In this study, we aim to answer whether making code easier to understand through using contextual data improves the performance of pre-trained code language models for the task of code completion. We consider type annotations and comments as two common forms of additional contextual information that often help developers understand code better. For the experiments, we study code completion in two granularity levels; token and line completion and take three recent and large-scale language models for source code: UniXcoder, CodeGPT, and InCoder with five evaluation metrics. Finally, we perform the Wilcoxon Signed Rank test to gauge significance and measure the effect size. Contrary to our expectations, all models perform better if type annotations are removed (albeit the effect sizes are small). For comments, we find that the models perform better in the presence of multi-line comments (again with small effect sizes). Based on our observations, we recommend making proper design choices when training, fine-tuning, or simply selecting such models given the intended data and application. Better evaluations and multimodal techniques can also be further investigated to improve the practicality and accuracy of auto-completions.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00035","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173864","Code Completion;Transformers;Pre-trained Language Models;Context;Empirical Software Engineering","Training;Codes;Annotations;Source coding;Transformers;Data models;Software","","9","","48","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Model-Agnostic Syntactical Information for Pre-Trained Programming Language Models","I. Saberi; F. H. Fard","Department of Computer Science, Mathematics, Physics and Statistics, The University of British Columbia, Kelowna, Canada; Department of Computer Science, Mathematics, Physics and Statistics, The University of British Columbia, Kelowna, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","183","193","Pre-trained Programming Language Models (PPLMs) achieved many recent states of the art results for many code-related software engineering tasks. Though some studies use data flow or propose tree-based models that utilize Abstract Syntax Tree (AST), most PPLMs do not fully utilize the rich syntactical information in source code. Still, the input is considered a sequence of tokens. There are two issues; the first is computational inefficiency due to the quadratic relationship between input length and attention complexity. Second, any syntactical information, when needed as an extra input to the current PPLMs, requires the model to be pre-trained from scratch, wasting all the computational resources already used for pre-training the current models. In this work, we propose Named Entity Recognition (NER) adapters, lightweight modules that can be inserted into Transformer blocks to learn type information extracted from the AST. These adapters can be used with current PPLMs such as CodeBERT, GraphCodeBERT, and CodeT5. We train the NER adapters using a novel Token Type Classification objective function (TTC). We insert our proposed work in CodeBERT, building CodeBERTER, and evaluate the performance on two tasks of code refinement and code summarization. CodeBERTER improves the accuracy of code refinement from 16.4 to 17.8 while using 20% of training parameter budget compared to the fully fine-tuning approach, and the BLEU score of code summarization from 14.75 to 15.90 while reducing 77% of training parameters compared to the fully fine-tuning approach.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00036","Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173960","Adapters;Pre-trained Programming Language Models","Training;Adaptation models;Computer languages;Codes;Computational modeling;Source coding;Syntactics","","3","","50","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"An Empirical Study of High Performance Computing (HPC) Performance Bugs","M. A. Kalam Azad; N. Iqbal; F. Hassan; P. Roy","Department of Computer and Information Science, University of Michigan - Dearborn, Michigan, USA; Department of Computer and Information Science, University of Michigan - Dearborn, Michigan, USA; Department of Computer and Information Science, University of Michigan - Dearborn, Michigan, USA; Department of Computer and Information Science, University of Michigan - Dearborn, Michigan, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","194","206","Performance efficiency and scalability are the major design goals for high performance computing (HPC) applications. However, it is challenging to achieve high efficiency and scalability for such applications due to complex underlying hardware architecture, inefficient algorithm implementation, suboptimal code generation by the compilers, inefficient parallelization, and so on. As a result, the HPC community spends a significant effort detecting and fixing the performance bugs frequently appearing in scientific applications. However, it is important to accumulate the experience to guide the scientific software engineering community to write performance-efficient code.In this paper, we investigate open-source HPC applications to categorize the performance bugs and their fixes and measure the programmer’s effort and experience to fix them. For this purpose, we first perform a large-scale empirical analysis on 1729 HPC performance commits collected from 23 real-world projects. Through our manual analysis, we identify 186 performance issues from these projects. Furthermore, we study the root cause of these performance issues and generate a performance bug taxonomy for HPC applications. Our analysis identifies that inefficient algorithm implementation (39.3%), inefficient code for target micro-architecture (31.2%), and missing parallelism and inefficient parallelization (14.5%) are the top three most prevalent categories of performance issues for HPC applications. Additionally, to understand how the performance bugs are fixed, we analyze the performance fix commits and categorize them into eight performance fix types. We further measure the developer’s efforts and expertise required to fix performance bugs. The analysis identified that performance bug fixes are complicated with a median patch size (LOC) of 35 lines and are mostly fixed by experienced developers.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00037","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174003","Empirical Study;HPC;Performance Bugs;Performance Optimization","Codes;Scalability;High performance computing;Computer bugs;Taxonomy;Software algorithms;Manuals","","6","","70","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"What Happens When We Fuzz? Investigating OSS-Fuzz Bug History","B. N. Keller; B. S. Meyers; A. Meneely","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","207","217","BACKGROUND: Software engineers must be vigilant in preventing and correcting vulnerabilities and other critical bugs. In servicing this need, numerous tools and techniques have been developed to assist developers. Fuzzers, by autonomously generating inputs to test programs, promise to save time by detecting memory corruption, input handling, exception cases, and other issues.AIMS: The goal of this work is to empower developers to prioritize their quality assurance by analyzing the history of bugs generated by OSS-Fuzz. Specifically, we examined what has happened when a project adopts fuzzing as a quality assurance practice by measuring bug lifespans, learning opportunities, and bug types.METHOD: We analyzed 44,102 reported issues made public by OSS-Fuzz prior to March 12, 2022. We traced the Git commit ranges reported by repeated fuzz testing to the source code repositories to identify how long fuzzing bugs remained in the system, who fixes these bugs, and what types of problems fuzzers historically have found. We identified the bug-contributing commits to estimate when the bug containing code was introduced, and measure the timeline from introduction to detection to fix.RESULTS: We found that bugs detected in OSS-Fuzz have a median lifespan of 324 days, but that bugs, once detected, only remain unaddressed for a median of 2 days. Further, we found that of the 8,099 issues for which a source committing author can be identified, less than half (45.9%) of issues were fixed by the same author that introduced the bug.CONCLUSIONS: The results show that fuzzing can be used to makes a positive impact on a project that takes advantage in terms of their ability to address bugs in a time frame conducive to fixing mistakes prior to a product release. However, the rate at which we find authors are not correcting their own errors suggests that not all developers are benefiting from the learning opportunities provided by fuzzing feedback.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00038","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174067","software security;fuzzing;vulnerability remediation;data mining","Quality assurance;Codes;Source coding;Computer bugs;Fuzzing;Software;History","","2","","38","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Semantically-enriched Jira Issue Tracking Data","T. Diamantopoulos; D. -N. Nastos; A. Symeonidis","Electrical and Computer Engineering Dept., Aristotle University of Thessaloniki, Thessaloniki, Greece; Electrical and Computer Engineering Dept., Aristotle University of Thessaloniki, Thessaloniki, Greece; Electrical and Computer Engineering Dept., Aristotle University of Thessaloniki, Thessaloniki, Greece",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","218","222","Current state of practice dictates that software developers host their projects online and employ project management systems to monitor the development of product features, keep track of bugs, and prioritize task assignments. The data stored in these systems, if their semantics are extracted effectively, can be used to answer several interesting questions, such as finding who is the most suitable developer for a task, what the priority of a task should be, or even what is the actual workload of the software team. To support researchers and practitioners that work towards these directions, we have built a system that crawls data from the Jira management system, performs topic modeling on the data to extract useful semantics and stores them in a practical database schema. We have used our system to retrieve and analyze 656 projects of the Apache Software Foundation, comprising data from more than a million Jira issues.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00039","Horizon Europe; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174143","Mining Software Repositories;Task Management;Jira Issues;Topic Modeling;BERT","Source coding;Semantics;Computer bugs;Project management;Software;Data mining;Task analysis","","7","","38","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"HasBugs - Handpicked Haskell Bugs","L. Applis; A. Panichella","Software Engineering Research Group (SERG), Delft University of Technology, Delft, Netherlands; Software Engineering Research Group (SERG), Delft University of Technology, Delft, Netherlands",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","223","227","We present HasBugs, an extensible and manually-curated dataset of real-world 25 Haskell Bugs from 6 open source repositories. We provide a faulty, tested, and fixed version of each bug in our dataset with reproduction packages, description, and bug context. For technical users, the dataset is meant to either help researchers adapt techniques from other programming languages to Haskell or to provide a human-verified gold standard for tools evaluation and enable future reproducibility. We also see applicability for qualitative research, e.g., by analysis of bug lifecycles and comparison to other languages. We provide a companion website for easy access and overview under https://ciselab.github.io/HasBugs/.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00040","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174017","","Computer languages;Codes;Computer bugs;Static analysis;Manuals;Benchmark testing;Software","","3","","22","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"An Empirical Study on the Performance of Individual Issue Label Prediction","J. Heo; S. Lee","Department of AI Convergence Engineering, Gyeongsang National University, Jinju, Republic of Korea; Department of AI Convergence Engineering Department of Aerospace and Software Engineering, Gyeongsang National University, Jinju, Republic of Korea",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","228","233","In GitHub, open-source software (OSS) developers label issue reports. As issue labeling is a labor-intensive manual task, automatic approaches have developed to label issue reports. However, those approaches have shown limited performance. Therefore, it is necessary to analyze the performance of predicting labels for an issue report. Understanding labels with high performance and those with low performance can help improve the performance of automatic issue labeling tasks. In this paper, we investigate the performance of individual label prediction. Our investigation uncovers labels with high performance and those with low performance. Our results can help researchers to understand the different characteristics of labels and help developers to develop a unified approach that combines several effective approaches for different kinds of issues.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00041","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174030","Issue Classification;Empirical Study;Github;Issue Report;Label Prediction;Performance Analysis;Labeling","Manuals;Labeling;Data mining;Task analysis;Open source software;Software development management","","1","","28","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Investigating the Resolution of Vulnerable Dependencies with Dependabot Security Updates","H. Mohayeji; A. Agaronian; E. Constantinou; N. Zannone; A. Serebrenik","Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands; University of Cyprus, Nicosia, Cyprus; Eindhoven University of Technology, Eindhoven, The Netherlands; Eindhoven University of Technology, Eindhoven, The Netherlands",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","234","246","Modern software development practices increasingly rely on third-party libraries due to the inherent benefits of reuse. However, libraries may contain security vulnerabilities that can propagate to the dependent applications. To counter this, maintainers of dependent projects should monitor their dependencies and security reports to ensure that only patched releases of the upstream applications are in use. As manual maintenance of dependencies has shown to be ineffective, several automated tools (aka bots) have been proposed to assist developers in rapidly identifying and resolving vulnerable dependencies. In this work, we focus on Dependabot, a popular bot providing security and version updates, and study developers’ receptivity to its security updates in engineered and actively maintained JavaScript projects. Moreover, we carry out a fine-grained analysis of the lifecycle of every vulnerability to manifest how they are dealt with in the presence of Dependabot. Our findings show that the task of fixing vulnerable dependencies is, to a large extent, delegated to Dependabot and that developers merge the majority of security updates within several days. On the other hand, when developers do not merge a security update, they usually address the identified vulnerability manually. This approach, however, often takes up to several months which in turn could expose the projects to security issues.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00042","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174082","Dependency Management;Security;Bot;Depend-abot","Pipelines;Manuals;Chatbots;Software;Libraries;Security;Task analysis","","4","","71","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Unveiling the Relationship Between Continuous Integration and Code Coverage","D. Saraiva; D. A. Da Costa; U. Kulesza; G. Sizílio; J. G. Neto; R. Coelho; M. Nagappan","Federal University of Rio Grande Do Norte, Brazil; University of Otago, New Zealand; Federal University of Rio Grande Do Norte, Brazil; Federal University of Rio Grande Do Norte, Brazil; Federal University of Rio Grande Do Norte, Brazil; Federal University of Rio Grande Do Norte, Brazil; University of Waterloo, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","247","259","Continuous integration (CI) is a software engineering practice that advocates the frequent integration of software through an automated build process. Existing research has explored the benefits of CI, such as detecting errors earlier in the software life-cycle. Although CI heavily focuses on automated tests, it is still unclear whether CI is associated with better code coverage, which could be a major benefit of using CI. To investigate whether CI is associated with an improvement in code coverage, our work compares 30 projects that adopted CI (CI projects) and 30 projects that have never adopted CI (NOCI projects). In total, we studied 1,440 versions from different projects to analyze trends in code coverage related to CI. While evaluating trends of code coverage within CI and NOCI projects, we observe more projects with rising trends of code coverage in CI projects (50%) than NOCI projects (10%). Moreover, the maintaining trends are different, as CI projects tend to stabilize at a higher code coverage rate than NOCI projects. Investigating the CI projects alone, the statistical evidences indicate that the adoption of CI is associated with the increase in code coverage. The findings of this study, therefore, reveal a positive association between CI and a higher code coverage rate.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00043","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174188","software testing;continuous integration;code coverage;empirical study","Codes;Market research;Software;Data mining;Software engineering","","3","","64","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"EGAD: A moldable tool for GitHub Action analysis","P. Valenzuela-Toledo; A. Bergel; T. Kehrer; O. Nierstrasz","Software Engineering Group, University of Bern, Bern, Switzerland; RelationalAI, Bern, Switzerland; Software Engineering Group, University of Bern, Bern, Switzerland; Feenk GmbH, Wabern, Switzerland",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","260","264","GitHub Actions (GA) enjoy increasing popularity in many software development projects as a means to automate repetitive software engineering tasks by enabling programmable event-driven workflows. Researchers typically analyze GA at the raw data level using batch tools to mine and analyze actions, jobs, and steps within GA workflows. Although this approach is widely applicable, it ignores the specific context of the GA workflow domain. Consequently, researchers do not reason directly about the domain abstractions.We present our preliminary steps in building EGAD (Explorable GitHub Action Domain Model), a moldable domain-specific tool to depict and analyze detailed GA workflow data. EGAD consists of an explorable domain model of GA workflows augmented with custom, domain-specific views, and live narratives. We illustrate EGAD in action using it to explore ""sticky commits"" in GitHub repositories.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173982","GitHub Actions;software evolution;moldable development","Analytical models;Buildings;Software;Data models;Data mining;Task analysis;Software development management","","4","","28","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"The Atlassian Data Lake: consolidating enriched software development data in a single, queryable system","A. Friedman; R. Dhupelia; B. Jackson","Atlassian, Sydney, Australia; Atlassian, Sydney, Australia; Atlassian, Sydney, Australia",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","265","266","Software teams are under continuous pressure to work effectively and achieve a high bar of performance. The data contained within software development lifecycle tools presents the opportunity to obtain visibility into DevOps metrics [12] , Flow metrics [17] , and other signals that provide insights into team effectiveness [14] . Such tool-based data can complement other information sources, such as employee surveys, towards a comprehensive picture of organization and team health [13] . Moreover, managing work across multiple teams requires a high level of visibility into the work of those teams, to inform decisions on team velocity, resource allocation, and return on investment. Since much of the work is conducted in software development tools, they are an essential source for consolidating and presenting a clear picture of that work. As organizations strive to rip the benefits that location flexibility offers for employee outcomes [3] and shift to hybrid or remote work, the reliance on software development tools to obtain that level of visibility is likely to increase.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00045","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174105","Data lake;CDC;Software Analytics","Measurement;Surveys;Organizations;Big Data applications;Software;Remote working;Resource management","","1","","22","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Are We Speeding Up or Slowing Down? On Temporal Aspects of Code Velocity","G. Kudrjavets; N. Nagappan; A. Rastogi","University of Groningen, Groningen, Netherlands; Meta Platforms, Inc., Menlo Park, CA, USA; University of Groningen, Groningen, Netherlands",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","267","271","This paper investigates how the duration of various code review periods changes over a projects’ lifetime. We study four open-source software (OSS) projects: Blender, FreeBSD, LLVM, and Mozilla. We mine and analyze the characteristics of 283,235 code reviews that cover, on average, seven years’ worth of development. Our main conclusion is that neither the passage of time or the project’s size impact code velocity. We find that (a) the duration of various code review periods (time-to-first-response, time-to-accept, and time-to-merge) for FreeBSD, LLVM, and Mozilla either becomes shorter or stays the same; no directional trend is present for Blender, (b) an increase in the size of the code bases (annually 3–17%) does not accompany a decrease in code velocity, and (c) for FreeBSD, LLVM, and Mozilla, the 30-day moving median stays in a fixed range for time-to-merge. These findings do not change with variabilities in code churn metrics, such as the number of commits or distinct authors of code changes.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00046","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173977","Code review;code velocity;developer productivity","Productivity;Measurement;Codes;Market research;Data mining;Open source software","","2","","39","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Energy Consumption Estimation of API-usage in Smartphone Apps via Static Analysis","A. A. Bangash; K. Eng; Q. Jamal; K. Ali; A. Hindle","Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, FAST-NU, Islamabad, Pakistan; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","272","283","Smartphone application (app) developers measure the energy consumption of their apps to ensure that they do not consume excessive energy. However, existing techniques require developers to generate and execute test cases on expensive, sophisticated hardware. To address these challenges, we propose a static-analysis approach that estimates the energy consumption of API usage in an app, eliminating the need for test case execution. To instantiate our approach, we have profiled the energy consumption of the Swift SQLite API operations. Given a Swift app, we first scan it for uses of SQLite. We then combine that information with the measured energy profile to compute E-factor, an estimate of the energy consumption of the API usage in an app. To evaluate the usability of E-factor, we have calculated the E-factor of 56 real-world iOS apps. We have also compared the E-factor of 16 versions and 11 methods from 3 of those apps to their hardware-based energy measurements. Our findings show that E-factor positively correlates with the hardware-based energy measurements, indicating that E-factor is a practical estimate to compare the energy consumption difference in API usage across different versions of an app. Developers may also use E-factor to identify excessive energy-consuming methods in their apps and focus on optimizing them. Our approach is most useful in an Integrated Development Environment (IDE) or Continuous Integration (CI) pipeline, where developers receive energy consumption insights within milliseconds of making a code modification.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00047","Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174069","Mobile Application;Static Analysis;Energy Estimation","Energy consumption;Codes;Current measurement;Pipelines;Energy measurement;Estimation;Static analysis","","2","","53","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"An Exploratory Study on Energy Consumption of Dataframe Processing Libraries","S. Shanbhag; S. Chimalakonda","Department of Computer Science & Engineering, RISHA Lab, Indian Institute of Technology Tirupati, India; Department of Computer Science & Engineering, RISHA Lab, Indian Institute of Technology Tirupati, India",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","284","295","The energy consumption of machine learning applications and their impact on the environment has recently gained attention as a research area, focusing on the model creation and training/inference phases. The data-oriented stages of the machine learning pipeline, which involve pre-processing, cleaning, and exploratory analysis, are critical components. However, energy consumption during these stages has received limited attention. Dataframe processing libraries play a significant role in these stages, and optimizing their energy consumption is important for reducing environmental impact and operational costs. Therefore, as a first step towards studying their energy efficiency, we investigate and compare the energy consumption of three popular dataframe processing libraries, namely Pandas, Vaex, and Dask. We perform experiments across 21 dataframe processing operations within four categories, utilizing three distinct datasets. Our results indicate that no single library is the most energy-efficient for all tasks, and the choice of a library can have a significant impact on energy consumption based on the types and frequencies of operations performed. The findings of this study suggest the potential for optimization of the energy consumption of data-oriented stages in the machine learning pipeline and warrant further research in this area.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00048","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174114","dataframe;data preprocessing;energy efficiency;machine learning pipeline","Training;Energy consumption;Pipelines;Machine learning;Libraries;Energy efficiency;Cleaning","","4","","48","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Whistleblowing and Tech on Twitter","L. Duits; I. Kashyap; J. Bekkink; K. Aslam; E. Guzmán",Vrije Universiteit Amsterdam; Vrije Universiteit Amsterdam; Vrije Universiteit Amsterdam; Vrije Universiteit Amsterdam; Vrije Universiteit Amsterdam,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","296","308","From airports to banks, healthcare, space crafts, and even amazon services, technology impacts almost every aspect of today’s life. If wrongdoings occur within or in relation to technology, they can have big implications on individuals, groups of people, or society as a whole. Whistleblowers are insiders who expose such wrongdoings— eventually stopping misconducts, such as fraud, endangerment to public health and safety, or damage to the environment. Twitter is a microblogging service that allows millions of users to share their views with people distributed all over the world on a daily basis. Tweets have the potential to contain useful information about whistleblowing in tech, from the general public and whistleblowers. However, until now this point has not been researched.To fill this gap, we conducted an exploratory study on technology-related whistleblowing tweets by manually analysing tweets, utilising descriptive statistics, and machine learning techniques. We mined 7,400 tweets from whistleblowers themselves, as well as news and opinions about certain whistleblowers and whistleblowing cases. Although our results show that only 30% of the tweets in our sample dataset (obtained through specific search terms) contained relevant information about whistleblowing in technology, our analysis shows that tweets provide valuable information for both researchers and companies to understand the public opinion regarding whistleblowing cases. Furthermore, we found that machine learning techniques are promising means for extracting information about whistleblowing in tech from the vast stream of tweets.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00049","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174094","whistleblowing;twitter;ethics in tech","Social networking (online);Filtering;Blogs;Machine learning;Companies;Software;Safety","","4","","76","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"UnGoML: Automated Classification of unsafe Usages in Go","A. -K. Wickert; C. Damke; L. Baumgärtner; E. Hüllermeier; M. Mezini","Software Technology Group, Technische Universität Darmstadt, Darmstadt, Germany; Institute of Informatics University of Munich, Munich, Germany; Software Technology Group, Technische Universität Darmstadt, Darmstadt, Germany; Munich Center for Machine Learning Institute of Informatics, University of Munich, Munich, Germany; Hessian Center for Artificial Intelligence (hessian.AI) National Research Center for Applied Cybersecurity ATHENE Software Technology Group, Technische Universität Darmstadt, Darmstadt, Germany",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","309","321","The Go programming language offers strong protection from memory corruption. As an escape hatch of these protections, it provides the unsafe package. Previous studies identified that this unsafe package is frequently used in real-world code for several purposes, e.g., serialization or casting types. Due to the variety of these reasons, it may be possible to refactor specific usages to avoid potential vulnerabilities. However, the classification of unsafe usages is challenging and requires the context of the call and the program’s structure. In this paper, we present the first automated classifier for unsafe usages in Go, UnGoML, to identify what is done with the unsafe package and why it is used. For UnGoML, we built four custom deep learning classifiers trained on a manually labeled data set. We represent Go code as enriched control-flow graphs (CFGs) and solve the label prediction task with one single-vertex and three context-aware classifiers. All three context-aware classifiers achieve a top-1 accuracy of more than 86% for both dimensions, WHAT and WHY. Furthermore, in a set-valued conformal prediction setting, we achieve accuracies of more than 93% with mean label set sizes of 2 for both dimensions. Thus, UnGoML can be used to efficiently filter unsafe usages for use cases such as refactoring or a security audit. UnGoML: https://github.com/stg-tud/UnGoML Artifact: https://dx.doi.org/10.6084/m9.figshare.22293052","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00050","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174087","graph neural networks;Go;unsafe package;classification;API-misuse","Deep learning;Computer languages;Codes;Static analysis;Computer architecture;Software;Safety","","","","47","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Connecting the .dotfiles: Checked-In Secret Exposure with Extra (Lateral Movement) Steps","G. Jungwirth; A. Saha; M. Schröder; T. Fiebig; M. Lindorfer; J. Cito","TU Wien, Vienna, Austria; TU Wien, Vienna, Austria; TU Wien, Vienna, Austria; Max-Planck-Institut für Informatik, Saarbrücken, Germany; TU Wien, Vienna, Austria; TU Wien, Vienna, Austria",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","322","333","Personal software configurations, known as dotfiles, are increasingly being shared in public repositories. To understand the security and privacy implications of this phenomenon, we conducted a large-scale analysis of dotfiles repositories on GitHub. Furthermore, we surveyed repository owners to understand their motivations for sharing dotfiles, and their awareness of the security implications. Our mixed-method approach consisted of two parts: (1) We mined 124,230 public dotfiles repositories and inductively searched them for security and privacy flaws. (2) We then conducted a survey of repository owners (n=1,650) to disclose our findings and learn more about the problems and implications. We found that 73.6 % of repositories leak potentially sensitive information, most commonly email addresses (of which we found 1.2 million), but also RSA private keys, API keys, installed software versions, browsing history, and even mail client inboxes. In addition, we found that sharing is mainly ideological (an end in itself) and to show off (""ricing""), in addition to easing machine setup. Most users are confident about the contents of their files and claim to understand the security implications. In response to our disclosures, a small minority (2.2%) will make their repositories private or delete them, but the majority of respondents will continue sharing their dotfiles after taking appropriate actions. Dotfiles repositories are a great tool for developers to share knowledge and communicate – if done correctly. We provide recommendations for users and platforms to make them more secure. Specifically, tools should be used to manage dotfiles. In addition, platforms should work on more sophisticated tests, to find weaknesses automatically and inform the users or control the damage.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00051","Vienna Science and Technology Fund; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174120","","Surveys;Privacy;Phishing;Search problems;Software;Security;Synchronization","","1","","57","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"MANDO-HGT: Heterogeneous Graph Transformers for Smart Contract Vulnerability Detection","H. H. Nguyen; N. -M. Nguyen; C. Xie; Z. Ahmadi; D. Kudendo; T. -N. Doan; L. Jiang","L3S Research Center, Leibniz Universität Hannover, Hannover, Germany; Singapore Management University, Singapore; L3S Research Center, Leibniz Universität Hannover, Hannover, Germany; L3S Research Center, Leibniz Universität Hannover, Hannover, Germany; L3S Research Center, Leibniz Universität Hannover, Hannover, Germany; Independent Researcher, Atlanta, Georgia, USA; Singapore Management University, Singapore",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","334","346","Smart contracts in blockchains have been increasingly used for high-value business applications. It is essential to check smart contracts' reliability before and after deployment. Although various program analysis and deep learning techniques have been proposed to detect vulnerabilities in either Ethereum smart contract source code or bytecode, their detection accuracy and scalability are still limited. This paper presents a novel framework named MANDO-HGT for detecting smart contract vulnerabilities. Given Ethereum smart contracts, either in source code or bytecode form, and vulnerable or clean, MANDO-HGT custom-builds heterogeneous contract graphs (HCGs) to represent control-flow and/or function-call information of the code. It then adapts heterogeneous graph transformers (HGTs) with customized meta relations for graph nodes and edges to learn their embeddings and train classifiers for detecting various vulnerability types in the nodes and graphs of the contracts more accurately. We have collected more than 55K Ethereum smart contracts from various data sources and verified the labels for 423 buggy and 2,742 clean contracts to evaluate MANDO-HGT. Our empirical results show that MANDO-HGT can significantly improve the detection accuracy of other state-of-the-art vulnerability detection techniques that are based on either machine learning or conventional analysis techniques. The accuracy improvements in terms of F1-score range from 0.7% to more than 76% at either the coarse-grained contract level or the fine-grained line level for various vulnerability types in either source code or bytecode. Our method is general and can be retrained easily for different vulnerability types without the need for manually defined vulnerability patterns.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00052","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174104","vulnerability detection;smart contracts;source code;bytecode;heterogeneous graph learning;graph transformer","Deep learning;Codes;Source coding;Soft sensors;Scalability;Image edge detection;Smart contracts","","6","","79","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"SecretBench: A Dataset of Software Secrets","S. K. Basak; L. Neil; B. Reaves; L. Williams","North Carolina State University, USA; North Carolina State University, USA; North Carolina State University, USA; North Carolina State University, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","347","351","According to GitGuardian’s monitoring of public GitHub repositories, the exposure of secrets (API keys and other credentials) increased two-fold in 2021 compared to 2020, totaling more than six million secrets. However, no benchmark dataset is publicly available for researchers and tool developers to evaluate secret detection tools that produce many false positive warnings. The goal of our paper is to aid researchers and tool developers in evaluating and improving secret detection tools by curating a benchmark dataset of secrets through a systematic collection of secrets from open-source repositories. We present a labeled dataset of source codes containing 97,479 secrets (of which 15,084 are true secrets) of various secret types extracted from 818 public GitHub repositories. The dataset covers 49 programming languages and 311 file types.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00053","National Science Foundation; Google; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174157","software_secrets;credentials;github","Computer languages;Systematics;Source coding;Benchmark testing;Feature extraction;Software;Data mining","","9","","34","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"An Empirical Study to Investigate Collaboration Among Developers in Open Source Software (OSS)","W. Sun; S. Iwuchukwu; A. A. Bangash; A. Hindle","Department of Computing Science, University of Alberta, Edmonton, Canada; Department of Computing Science, University of Alberta, Edmonton, Canada; Department of Computing Science, University of Alberta, Edmonton, Canada; Department of Computing Science, University of Alberta, Edmonton, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","352","356","The value of teamwork is being recognized by project owners, resulting in an increased acknowledgement of collaboration among developers in software engineering. A good understanding of how developers work together could positively impact software development practices. In this paper, we investigate the collaboration habits of developers in project files by leveraging the World of Code (WoC) dataset and GitHub API. We first identify the collaboration level of developers within the project files, such as the source, test, documentation, and build files, using the Author Cross Entropy (ACE). From the results we find out that test files report the highest degree of collaboration among the developers, perhaps because collaboration is critical to ensure convergence of functionality tests. Furthermore, the source code files show the least degree of collaboration, perhaps because of code ownership and the complexity and difficulty in code modification. Secondly, given the widespread usage of the Python programming language, we investigate the Python code tokens that are more prone to change and collaboration. Our findings offer insights into the specific project files and Python code tokens that developers typically collaborate on in the open-source community. This information can be used by researchers and developers to enhance existing collaboration platforms and tools.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00054","Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174100","OSS;WoC;development-practice","Codes;Source coding;Collaboration;Documentation;Teamwork;Task analysis;Open source software","","","","18","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Insights into Female Contributions in Open-Source Projects","A. I. Champa; M. F. Rabbi; M. F. Zibran; M. R. Islam","Department of Computer Science, Idaho State University, USA; Department of Computer Science, Idaho State University, USA; Department of Computer Science, Idaho State University, USA; University of Wisconsin, Eau Claire, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","357","361","This paper presents a large quantitative study of the contributions of females compared to males in open-source projects. Female participation is found substantially low and females are found more engaged in non-coding work compared to men. The findings are statistically significant and are derived from an in-depth analysis of over 10 thousand developers’ contributions to more than 81 million different projects in the World of Code (WoC) infrastructure. The insights from this study are useful in addressing gender disparity in the field.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00055","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174034","gender;female;diversity;open-source;study","Computer languages;Codes;C++ languages;Encoding;Software;Data mining;Task analysis","","16","","30","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"The Secret Life of CVEs","P. Przymus; M. Fejzer; J. Narębski; K. Stencel","Nicolaus Copernicus University, Toruń, Poland; Nicolaus Copernicus University, Toruń, Poland; Nicolaus Copernicus University, Toruń, Poland; University of Warsaw, Warsaw, Poland",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","362","366","The Common Vulnerabilities and Exposures (CVEs) system is a reference method for documenting publicly known information security weaknesses and exposures. This paper presents a study of the lifetime of CVEs in software projects and the risk factors affecting their existence. The study uses survival analysis to examine how features of programming languages, projects, and CVEs themselves impact the lifetime of CVEs. We suggest avenues for future research to investigate the effect of various factors on the resolution of vulnerabilities.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00056","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174215","CVE;Mining software repositories;Software quality;Survival analysis","Computer languages;Codes;Computer bugs;Information security;Software;Time factors;Data mining","","1","","22","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Evolution of the Practice of Software Testing in Java Projects","A. Islam; N. T. Hewage; A. Ali Bangash; A. Hindle","Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","367","371","Software testing helps developers minimize bugs and errors in their code, improving the overall software quality. In 2013, Kochhar et al. analyzed 20,817 software projects in order to study how prevalent the practice of software testing is in open-source projects. They found that projects with more lines of code (LOC) and projects with more developers tend to have more test cases. Additionally, they found a weak positive correlation between the number of test cases and the number of bugs. Since the conclusions of a study might become irrelevant over time because of the latest practices in the relevant fields, in this paper, we investigate if these conclusions remain valid if we re-evaluate Kochhar et al.’s findings on the Java projects that were developed from 2012 to 2021. For evaluation, we use a random sample of 20,000 open-source Java projects each year. Our results show that Kochhar et al.’s conclusions regarding the projects with test cases having more LOC, the weak positive correlation between the number of test cases and authors, and the weak positive correlation between the number of test cases and bugs remain stable until 2021. Our study corroborates Kochhar et al.’s conclusions and helps developers refocus in light of the latest findings regarding the practice of software testing.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00057","Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174167","Software Testing;Replication Study;WoC;Java Projects","Software testing;Java;Correlation;Codes;Computer bugs;Software quality;Software systems","","2","","21","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Keep the Ball Rolling: Analyzing Release Cadence in GitHub Projects","O. Kilic; N. Bowness; O. Baysal","Carleton University, Ottawa, ON, Canada; University of Ottawa, Ottawa, ON, Canada; Carleton University, Ottawa, ON, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","372","376","Release cadence is the measure of time between software releases, both internal and external. Few studies analyze popular open-source projects’ release cadence and use. In this work, we gathered over 8,000 GitHub projects from four popular programming languages; Go, Java, Python, and Ruby. Project were categorized into slow, modern, rapid, and rapid+ release cadence groups. We determined that only 13% of projects had a rapid release cadence of under 30 days. Applying NLP and topic modeling, we extracted the top 5 frequent topics for programming languages and obtained insights into their common uses. For example, Go projects are commonly used for Kubernetes tooling, while Ruby projects often leverage Rails for web development. We observed no significant relationship between frequent topics and the release cadence categories. This finding suggests release cadences are independent of the type of software delivered for a programming language.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00058","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174061","Release cadence;README;GitHub;programming languages;topic modeling","Rails;Java;Schedules;Stars;Software;Time measurement;Software measurement","","","","33","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Understanding the Role of Images on Stack Overflow","D. Wang; T. Xiao; C. Treude; R. G. Kula; H. Hata; Y. Kamei","Kyushu University, Japan; Nara Institute of Science and Technology, Japan; University of Melbourne, Australia; Nara Institute of Science and Technology, Japan; Shinshu University, Japan; Kyushu University, Japan",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","377","388","Images are increasingly being shared by software developers in diverse channels including question-and-answer forums like Stack Overflow. Although prior work has pointed out that these images are meaningful and provide complementary information compared to their associated text, how images are used to support questions is empirically unknown. To address this knowledge gap, in this paper we specifically conduct an empirical study to investigate (I) the characteristics of images, (II) the extent to which images are used in different question types, and (III) the role of images on receiving answers. Our results first show that user interface is the most common image content and undesired output is the most frequent purpose for sharing images. Moreover, these images essentially facilitate the understanding of 68% of sampled questions. Second, we find that discrepancy questions are more relatively frequent compared to those without images, but there are no significant differences observed in description length in all types of questions. Third, the quantitative results statistically validate that questions with images are more likely to receive accepted answers, but do not speed up the time to receive answers. Our work demonstrates the crucial role that images play by approaching the topic from a new angle and lays the foundation for future opportunities to use images to assist in tasks like generating questions and identifying question-relatedness.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00059","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173948","Q&A-forums;Stack Overflow;Images","User interfaces;Software;Data mining;Task analysis","","1","","42","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Do Subjectivity and Objectivity Always Agreeƒ A Case Study with Stack Overflow Questions","S. Mondal; M. M. Rahman; C. K. Roy","University of Saskatchewan, Canada; Dalhousie University, Canada; University of Saskatchewan, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","389","401","In Stack Overflow (SO), the quality of posts (i.e., questions and answers) is subjectively evaluated by users through a voting mechanism. The net votes (upvotes − downvotes) obtained by a post are often considered an approximation of its quality. However, about half of the questions that received working solutions got more downvotes than upvotes. Furthermore, about 18% of the accepted answers (i.e., verified solutions) also do not score the maximum votes. All these counter-intuitive findings cast doubts on the reliability of the evaluation mechanism employed at SO. Moreover, many users raise concerns against the evaluation, especially downvotes to their posts. Therefore, rigorous verification of the subjective evaluation is highly warranted to ensure a non-biased and reliable quality assessment mechanism. In this paper, we compare the subjective assessment of questions with their objective assessment using 2.5 million questions and ten text analysis metrics. According to our investigation, four objective metrics agree with the subjective evaluation, two do not agree, one either agrees or disagrees, and the remaining three neither agree nor disagree with the subjective evaluation. We then develop machine learning models to classify the promoted and discouraged questions. Our models outperform the state-of-the-art models with a maximum of about 76%–87% accuracy.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00060","Natural Sciences and Engineering Research Council of Canada; Canada First Research Excellence Fund; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174053","Stack Overflow;question quality;objective evaluation;subjective evaluation;quality metrics;classification model","Measurement;Codes;Text analysis;Correlation;Machine learning;Entropy;User experience","","4","","60","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"GiveMeLabeledIssues: An Open Source Issue Recommendation System","J. Vargovich; F. Santos; J. Penney; M. A. Gerosa; I. Steinmacher","School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","402","406","Developers often struggle to navigate an Open Source Software (OSS) project’s issue-tracking system and find a suitable task. Proper issue labeling can aid task selection, but current tools are limited to classifying the issues according to their type (e.g., bug, question, good first issue, feature, etc.). In contrast, this paper presents a tool (GiveMeLabeledIssues) that mines project repositories and labels issues based on the skills required to solve them. We leverage the domain of the APIs involved in the solution (e.g., User Interface (UI), Test, Databases (DB), etc.) as a proxy for the required skills. GiveMeLabeledIssues facilitates matching developers’ skills to tasks, reducing the burden on project maintainers. The tool obtained a precision of 83.9% when predicting the API domains involved in the issues. The replication package contains instructions on executing the tool and including new projects. A demo video is available at https://www.youtube.com/watch?v=ic2quUue7i8","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00061","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174101","Open Source Software;Machine Learning;Label;Tag;Task;Issue Tracker","Navigation;Databases;Computer bugs;User interfaces;Labeling;Data mining;Task analysis","","8","","26","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"DocMine: A Software Documentation-Related Dataset of 950 GitHub Repositories","A. S. Manasa Venigalla; S. Chimalakonda","Department of Computer Science and Engineering, Indian Institute of Technology Tirupati, Tirupati, India; Department of Computer Science and Engineering, Indian Institute of Technology Tirupati, Tirupati, India",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","407","411","Software documentation is one of the critical aspects of a software project, that could support multiple tasks throughout the software development life-cycle. There is extensive research on understanding issues and challenges with existing documentation, which is typically available as readme files. In projects that support collaborative development, such as those on GitHub, other software artifacts such as commits, pull requests and issues, apart from the conventional readme files, wikis and source code comments, also contain useful information, that supports in understanding, using, extending and maintaining the project. However, we are not aware of any dataset that explicitly focuses on documentation-related information in multiple software artifacts such as readme files, commits and pull requests across a repository. To address this concern and to facilitate further research in software documentation, we present DocMine, as a dataset of documentation-related information, extracted from around 1.35M software artifacts in 950 GitHub repositories, spanning across four different programming languages. The dataset along with its documentation is made available in CSV and .sql formats at - https://doi.org/10.5281/zenodo.5195084.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00062","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173967","Software Artifacts;GitHub;Documentation;Issues;Pull Requests;Commits","Java;Source coding;Information services;Documentation;Software;Internet;Data mining","","1","","25","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"PENTACET data - 23 Million Contextual Code Comments and 250,000 SATD comments","M. Sridharan; L. Rantala; M. Mäntylä","M3S, University of Oulu, Oulu, Finland; M3S, University of Oulu, Oulu, Finland; M3S, University of Oulu, Oulu, Finland",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","412","416","Most Self-Admitted Technical Debt (SATD) research utilizes explicit SATD features such as ‘TODO’ and ‘FIXME’ for SATD detection. A closer look reveals several SATD research uses simple SATD (‘Easy to Find’) code comments without contextual data (preceding and succeeding source code context). This work addresses this gap through PENTACET (or 5C dataset) data. PENTACET is a large Curated Contextual Code Comments per Contributor and the most extensive SATD data. We mine 9,096 Open Source Software Java projects totaling over 400 million LOC. The outcome is a dataset with 23 million code comments, preceding and succeeding source code context for each comment, and more than 250,000 SATD comments, including both ‘Easy to Find’ and ‘Hard to Find’ SATD. We believe PENTACET data will further SATD research using Artificial Intelligence techniques.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00063","Academy of Finland; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174139","Mining Software Repositories;Technical Debt;Self-Admitted Technical Debt;Team Size","Measurement;Java;Codes;Source coding;Symbols;Static analysis;Manuals","","4","","33","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Don’t Forget the Exception! : Considering Robustness Changes to Identify Design Problems","A. Oliveira; J. Correia; L. Sousa; W. K. G. Assunção; D. Coutinho; A. Garcia; W. Oizumi; C. Barbosa; A. Uchôa; J. A. Pereira","Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Department of Electrical and Computer Engineering, Carnegie Mellon University, Pittsburgh, United States; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Federal University of Ceará (UFC), Itapajé, Brazil; Informatics Department – Pontifical Catholic, University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","417","429","Modern programming languages, such as Java, use exception-handling mechanisms to guarantee the robustness of software systems. Although important, the quality of exception code is usually poor and neglected by developers. Indiscriminate robustness changes (e.g., the addition of empty catch blocks) can indicate design decisions that negatively impact the internal quality of software systems. As it is known in the literature, multiple occurrences of poor code structures, namely code smells, are strong indicators of design problems. Still, existing studies focus mainly on the correlation of maintainability smells with design problems. However, using only these smells may not be enough since developers need more context (e.g., system domain) to identify the problems in certain scenarios. Moreover, these studies do not explore how changes in the exceptional code of the methods combined with maintainability smells can give complementary evidence of design problems. By covering both regular and exception codes, the developer can have more context about the system and find complementary code smells that reinforce the presence of design problems. This work aims to leverage the identification of design problems by tracking poor robustness changes combined with maintainability smells. We investigated the correlation between robustness changes and maintainability smells on the commit history of more than 160k methods from different releases of 10 open-source software systems. We observed that maintainability smells can be worsened or even introduced when robustness changes are performed. This scenario mainly happened for the smells Feature Envy, Long Method, and Dispersed Coupling. We also analyzed the co-occurrence between robustness and maintainability smells. We identified that the empty catch block and catch throwable robustness smells were the ones that co-occurred the most with maintainability smells related to the Concern Overload and Misplaced Concern design problems. The contribution of our work is to reveal that poor exception code, usually neglected by developers, negatively impacts the quality of methods and classes, signaled by the maintainability smells. Therefore, existing code smell detecting tools can be enhanced to leverage robustness changes to identify design problems.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00064","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174045","empirical study;design problems;robustness;exception handling;code smells","Couplings;Java;Computer languages;Codes;Correlation;Software systems;Robustness","","2","","59","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Pre-trained Model Based Feature Envy Detection","W. Ma; Y. Yu; X. Ruan; B. Cai","Key Laboratory of Aerospace Information Security and Trusted Computing, Ministry of Education, School of Cyber Science and Engineering, Wuhan University, China; Key Laboratory of Aerospace Information Security and Trusted Computing, Ministry of Education, School of Cyber Science and Engineering, Wuhan University, China; Key Laboratory of Aerospace Information Security and Trusted Computing, Ministry of Education, School of Cyber Science and Engineering, Wuhan University, China; Key Laboratory of Aerospace Information Security and Trusted Computing, Ministry of Education, School of Cyber Science and Engineering, Wuhan University, China",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","430","440","Code smells slow down software system development and makes them harder to maintain. Existing research aims to develop automatic detection algorithms to reduce the labor and time costs within the detection process. Deep learning techniques have recently been demonstrated to enhance the performance of recognizing code smells even more than metric-based heuristic detection algorithms. As large-scale pre-trained models for Programming Languages (PL), such as CodeT5, have lately achieved the top results in a variety of downstream tasks, some researchers begin to explore the use of pre-trained models to extract the contextual semantics of code to detect code smells. However, little research has employed contextual code semantics relationship between code snippets obtained by pre-trained models to identify code smells. In this paper, we investigate the use of the pre-trained model CodeT5 to extract semantic relationships between code snippets to detect feature envy, which is one of the most common code smells. In addition, to investigate the performance of these semantic relationships extracted by pre-trained models of different architectures on detecting feature envy, we compare CodeT5 with two other pre-trained models CodeBERT and CodeGPT. We have performed our experimental evaluation on ten open-source projects, our approach improves F-measure by 29.32% on feature envy detection and 16.57% on moving destination recommendation. Using semantic relations extracted by several pre-trained models to detect feature envy outperforms the state-of-the-art. This shows that using this semantic relation to detect feature envy is promising. To enable future research on feature envy detection, we have made all the code and datasets utilized in this article open source.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00065","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174241","Feature Envy;Deep Learning;Software Refactoring;Pre-trained Model;Code Smell","Codes;Source coding;Semantics;Computer architecture;Predictive models;Feature extraction;Software systems","","8","","42","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"CLEAN++: Code Smells Extraction for C++","T. Mashiach; B. Sotto-Mayor; G. Kaminka; M. Kalech","Ben Gurion University of the Negev, Be’er Sheva, Israel; Ben Gurion University of the Negev, Be’er Sheva, Israel; Bar Ilan University, Ramat Gan, Israel; Ben Gurion University of the Negev, Be’er Sheva, Israel",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","441","445","The extraction of features is an essential step in the process of mining software repositories. An important feature that has been actively studied in the field of mining software repositories is bad code smells. Bad code smells are patterns in the source code that indicate an underlying issue in the design and implementation of the software. Several tools have been proposed to extract code smells. However, currently, there are no tools that extract a significant number of code smells from software written in C++. Therefore, we propose CLEAN++ (Code smeLls ExtrActioN for C++) [1]. It is an extension of a robust static code analysis tool that implements 35 code smells. To evaluate CLEAN++, we ran it over 44 open-source projects and wrote test cases to validate each code smell. Also, we converted the test cases to Java and used two Java tools to validate the effectiveness of our tool. In the end, we confirmed that the CLEAN++ is successful at detecting code smells.The tool is available at https://github.com/Tomma94/CLEAN-Plus-Plus.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00066","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174137","Code Smells;Open Source;Mining Software Repositories;C++;Static Analysis Tool","Java;Codes;Source coding;C++ languages;Feature extraction;Software;Data mining","","2","","28","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"DACOS—A Manually Annotated Dataset of Code Smells","H. Nandani; M. Saad; T. Sharma","Dalhousie University Halifax, Canada; Dalhousie University Halifax, Canada; Dalhousie University Halifax, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","446","450","Researchers apply machine-learning techniques for code smell detection to counter the subjectivity of many code smells. Such approaches need a large, manually annotated dataset for training and benchmarking. Existing literature offers a few datasets; however, they are small in size and, more importantly, do not focus on the subjective code snippets. In this paper, we present DACOS, a manually annotated dataset containing 10, 267 annotations for 5, 192 code snippets. The dataset targets three kinds of code smells at different granularity–multifaceted abstraction, complex method, and long parameter list. The dataset is created in two phases. The first phase helps us identify the code snippets that are potentially subjective by determining the thresholds of metrics used to detect a smell. The second phase collects annotations for potentially subjective snippets. We also offer an extended dataset DACOSX that includes definitely benign and definitely smelly snippets by using the thresholds identified in the first phase. We have developed TAGMAN, a web application to help annotators view and mark the snippets one-by-one and record the provided annotations. We make the datasets and the web application accessible publicly. This dataset will help researchers working on smell detection techniques to build relevant and context-aware machine-learning models.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00067","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174039","Code smells;dataset;code annotation","Training;Measurement;Codes;Annotations;Machine learning;Benchmark testing;Software","","6","","37","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"What Warnings Do Engineers Really Fix? The Compiler That Cried Wolf","G. Kudrjavets; A. Kumar; A. Rastogi","University of Groningen, Groningen, Netherlands; Snap, Inc., Santa Monica, CA, USA; University of Groningen, Groningen, Netherlands",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","451","452","Build logs from a variety of Continuous Integration (CI) systems contain temporal data about the presence and distribution of compiler warnings. Results from the analysis and mining of that data will indicate what warnings engineers find useful and fix, or continuously ignore. The findings will include resolution times and resolution types for different warning categories. That data will help compiler developers adjust the warning levels according to the ground truth, clarify the diagnostic messages, and improve the non-actionable warnings. The empirical findings will also help engineers to decide what warnings are worth fixing and which ones are not.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00068","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173968","compiler warnings","Software;Data mining","","","","14","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Automating Arduino Programming: From Hardware Setups to Sample Source Code Generation","I. N. Bani Yusuf; D. Binte Abdul Jamal; L. Jiang","School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","453","464","An embedded system is a system consisting of software code, controller hardware, and I/O (Input/Output) hardware that performs a specific task. Developing an embedded system presents several challenges. First, the development often involves configuring hardware that requires domain-specific knowledge. Second, the library for the hardware may have API usage patterns that must be followed. To overcome such challenges, we propose a framework called ArduinoProg towards the automatic generation of Arduino applications. ArduinoProg takes a natural language query as input and outputs the configuration and API usage pattern for the hardware described in the query. Motivated by our findings on the characteristics of real-world queries posted in the official Arduino forum, we formulate ArduinoProg as three components, i.e., Library Retriever, Configuration Classifier, and Pattern Generator. First, Library Retriever preprocesses the input query and retrieves a set of relevant libraries using either lexical matching or vector-based similarity. Second, given Library Retriever’s output, Configuration Classifier infers the hardware configuration by classifying the method definitions found in the library’s implementation files into a hardware configuration class. Third, Pattern Generator also takes Library Retriever’s output as input and leverages a sequence-to-sequence model to generate the API usage pattern. Having instantiated each component of ArduinoProg with various machine learning models, we have evaluated ArduinoProg on real-world queries. Library Retriever achieves a Precision@K range of 44.0%-97.1%; Configuration Classifier achieves an Area under the Receiver Operating Characteristics curve (AUC) of 0.79-0.95; Pattern Generator yields a Normalized Discounted Cumulative Gain (NDCG)@K of 0.45-0.73. Such results indicate that ArduinoProg can generate practical and useful hardware configurations and API usage patterns to guide developers in writing Arduino code.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00069","Ministry of Education; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174037","arduino;embedded system;deep learning;information retrieval;code generation;api recommendation","Adaptation models;Embedded systems;Codes;Natural languages;Writing;Programming;Hardware","","1","","44","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"A Dataset of Bot and Human Activities in GitHub","N. Chidambaram; A. Decan; T. Mens","Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium; Software Engineering Lab, University of Mons, Mons, Belgium",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","465","469","Software repositories hosted on GitHub frequently use development bots to automate repetitive, effort intensive and error-prone tasks. To understand and study how these bots are used, state-of-the-art bot identification tools have been developed to detect bots based on their comments in commits, issues and pull requests. Given that bots can be involved in many other activity types, there is a need to consider more activities that they are carrying out in the software repositories they are involved in. We therefore propose a curated dataset of such activities carried out by bots and humans involved in GitHub repositories. The dataset was constructed by identifying 24 high-level activity types that could be extracted from 15 lower-level event types that were queried from GitHub’s event stream API for all considered bots and humans. The proposed dataset contains around 834K activities performed by 385 bots and 616 humans involved in GitHub repositories, during an observation period ranging from 25 November 2022 to 9 March 2023. By analysing the activity patterns of bots and humans, this dataset could lead to better bot identification tools and empirical studies on how bots play a role in collaborative software development.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00070","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173999","software development;bot activity;dataset;GitHub event stream;empirical analysis","Codes;Collaborative software;Chatbots;Software;Distance measurement;Data mining;Task analysis","","5","","14","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Optimizing Duplicate Size Thresholds in IDEs","K. Grotov; S. Titov; A. Suhinin; Y. Golubev; T. Bryksin",Constructor University; JetBrains Research; JetBrains; JetBrains Research; JetBrains Research,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","470","471","In this paper, we present an approach for transferring an optimal lower size threshold for clone detection from one language to another by analyzing their clone distributions. We showcase this method by transferring the threshold from regular Python scripts to Jupyter notebooks for using in two JetBrains IDEs, Datalore and DataSpell.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00071","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174064","code clones;ides;python;jupyter notebooks","Cloning;Software;Data mining;Python","","1","","13","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Boosting Just-in-Time Defect Prediction with Specific Features of C/C++ Programming Languages in Code Changes","C. Ni; X. Xu; K. Yang; D. Lo","Zhejiang University, China; Zhejiang University, China; Zhejiang University, China; Singapore Management University, Singapore",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","472","484","Just-in-time (JIT) defect prediction can identify changes as defect-inducing ones or clean ones and many approaches are proposed based on several programming language-independent change-level features. However, different programming languages have different characteristics and consequently may affect the quality of software projects. Meanwhile, the C programming language, one of the most popular ones, is widely used to develop foundation applications (i.e., operating system, database, compiler, etc.) in IT companies and its change-level characteristics on project quality have not been fully investigated. Additionally, whether open-source C projects have similar important features to commercial projects has not been studied much.To address the aforementioned limitations, in this paper, we investigate the impacts of programming language-specific features on the state-of-the-art JIT defect identification approach in an industrial setting. We collect and label the top-10 most starred C projects (i.e., 329,021 commits) on GitHub and 8 C projects in an ICT company (i.e., 12,983 commits). We also propose nine C-specific change-level features and focus our investigations on both open-source C projects on GitHub and C projects at the ICT company considering three aspects: (1) The effectiveness of C-specific change-level features in improving the performance of identification of defect-inducing changes, (2) The importance of features in the identification of defect-inducing changes between open-source C projects and commercial C projects, and (3) The effectiveness of combining language-independent features and C-specific features in a real-life setting at the ICT company.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00072","National Natural Science Foundation of China; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174108","Just-in-Time;C/C++ programming language;Supervised Methods","Computer languages;Program processors;Codes;Databases;Operating systems;Companies;Programming","","4","","58","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"A Large Scale Analysis of Semantic Versioning in NPM","D. Pinckney; F. Cassano; A. Guha; J. Bell","Northeastern University, Boston, USA; Northeastern University, Boston, USA; Northeastern and Roblox, Boston, USA; Northeastern University, Boston, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","485","497","The NPM package repository contains over two million packages and serves tens of billions of downloads per-week. Nearly every single JavaScript application uses the NPM package manager to install packages from the NPM repository. NPM relies on a ""semantic versioning"" (‘semver’) scheme to maintain a healthy ecosystem, where bug-fixes are reliably delivered to downstream packages as quickly as possible, while breaking changes require manual intervention by downstream package maintainers. In order to understand how developers use semver, we build a dataset containing every version of every package on NPM and analyze the flow of updates throughout the ecosystem. We build a time-travelling dependency resolver for NPM, which allows us to determine precisely which versions of each dependency would have been resolved at different times. We segment our analysis to allow for a direct analysis of security-relevant updates (those that introduce or patch vulnerabilities) in comparison to the rest of the ecosystem. We find that when developers use semver correctly, critical updates such as security patches can flow quite rapidly to downstream dependencies in the majority of cases (90.09%), but this does not always occur, due to developers’ imperfect use of both semver version constraints and semver version number increments. Our findings have implications for developers and researchers alike. We make our infrastructure and dataset publicly available under an open source license.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00073","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174013","NPM;dependency-management;JavaScript","Ecosystems;Semantics;Computer bugs;Manuals;Metadata;Licenses;Software","","5","","39","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Phylogenetic Analysis of Reticulate Software Evolution","A. Mori; M. Hashimoto","National Institute of Advanced Industrial Science and Technology, Osaka, Japan; Chiba Institute of Technology, Chiba, Japan",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","498","510","In this paper, we apply techniques from phylogenetics for uncovering evolutionary dependencies among software versions. Phylogenetics is a part of computational molecular biology that addresses the inference of evolution among organisms based on differences/similarities in DNA sequences and morphology. We apply a tree differencing technique to abstract syntax trees to calculate a distance matrix, which is then used by a distance-based phylogenetic algorithm to infer an evolution network. Such a network allows us to identify merging and branching among versions without manually looking into the details of the source code. Experiments on ancient versions of the Emacs editor and the open source 3D printer firmware show that we can reproduce the evolution of the software and identify code import/merging across different lineages. We also discuss how the techniques identify the feature models among software variations. To the best of our knowledge, this paper is the first to report on a reticulate phylogenetic analysis of the software. It may offer a helpful method for gaining information on the evolution of the software.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00074","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174112","software evolution;phylogenetics;AST differencing;distance matrix;horizontal code movements;feature model extraction","Codes;Three-dimensional displays;Source coding;Software algorithms;Syntactics;Software;Web servers","","","","50","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"PyMigBench: A Benchmark for Python Library Migration","M. Islam; A. K. Jha; S. Nadi; I. Akhmetov","University of Alberta, Edmonton, Canada; North Dakota State University, Fargo, USA; University of Alberta, Edmonton, Canada; University of Alberta, Edmonton, Canada",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","511","515","Developers heavily rely on Application Programming Interfaces (APIs) from libraries to build their projects. However, libraries might become obsolete, or new libraries with better APIs might become available. In such cases, developers replace the used libraries with alternative libraries, a process known as library migration. Since manually migrating between libraries is tedious and error prone, there has been a lot of effort towards automated library migration. However, most of the current research on automated library migration focuses on Java libraries, and even more so on version migrations of the same library. Despite the increasing popularity of Python, limited research has investigated migration between Python libraries. To provide the necessary data for advancing the development of Python library migration tools, this paper contributes PyMigBench, a benchmark of real Python library migrations.PyMigBench contains 59 analogous library pairs and 75 real migrations with migration-related code changes in 161 Python files across 57 client repositories.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00075","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174111","Python;library migration;migration-related code changes;benchmark","Java;Codes;Systematics;Buildings;Benchmark testing;Libraries;Software","","3","","35","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Determining Open Source Project Boundaries","S. Vargas","Open Source Programs Office Google, New York, NY, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","516","517","While open source ecosystems have fluid membership by nature, explicit boundaries are necessary to conduct research and analysis around projects and their communities as these exercises require a set number of sources to count as part of this effort. The ideal solution to this problem would provide researchers and analysts with a common approach to identify what is part of or affiliated with a project community and ecosystem.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00076","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174222","open source software;repositories;contributors","Fluids;Ecosystems;Software;Data mining","","","","4","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Intertwining Communities: Exploring Libraries that Cross Software Ecosystems","K. Kannee; R. G. Kula; S. Wattanakriengkrai; K. Matsumoto","Nara Institute of Science and Technology, Japan; Nara Institute of Science and Technology, Japan; Nara Institute of Science and Technology, Japan; Nara Institute of Science and Technology, Japan",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","518","522","Using libraries in applications has helped developers reduce the costs of reinventing already existing code. However, an increase in diverse technology stacks and third-party library usage has led developers to inevitably switch technologies and search for similar libraries implemented in the new technology. To assist with searching for these replacement libraries, maintainers have started to release their libraries to multiple ecosystems. Our goal is to explore the extent to which these libraries are intertwined between ecosystems. We perform a large-scale empirical study of 1.1 million libraries from five different software ecosystems, i.e., PyPI, CRAN, Maven, RubyGems, and NPM, to identify 4,146 GitHub repositories. As a starting point, insights from the study raise implications for library maintainers, users, contributors, and researchers into understanding how these different ecosystems are becoming more intertwined with each other.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00077","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174008","Software Ecosystems;Open Source Libraries","Costs;Codes;Ecosystems;Switches;Libraries;Software;Data mining","","1","","31","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Helm Charts for Kubernetes Applications: Evolution, Outdatedness and Security Risks","A. Zerouali; R. Opdebeeck; C. De Roover","Vrije Universiteit Brussel, Brussels, Belgium; Vrije Universiteit Brussel, Brussels, Belgium; Vrije Universiteit Brussel, Brussels, Belgium",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","523","533","Using Kubernetes for the deployment, management and scaling of containerized applications has become a common practice. To facilitate the installation and management of these applications, practitioners can use the Helm package manager to assemble their configuration files into charts. The latter are reusable packages of pre-configured Kubernetes resources that can be deployed as a unit. In this paper, we aim to support chart developers and users by carrying out a comprehensive study on publicly available charts. For 9,482 charts that are distributed via the Artifact Hub repository, we mine and collect the list of their metadata, versions, dependencies, maintainers and container images. Then, we carry out an empirical analysis to assess the state and evolution of charts, as well as the outdatedness and security risks of their images. We found that the ecosystem forming around Helm charts is growing fast. However, most of the charts are not official with no popularity and no license. We also observed that charts tend to release multiple versions, but around half of them are still in the initial development phase. When looking at the container images used in charts, we found that around half of them are outdated and 88.1% of them are exposed to vulnerabilities, jeopardizing 93.7% of the charts.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00078","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173942","Kubernetes;Helm;Software Ecosystem;Infrastructure-as-code;Evolution;Security","Ecosystems;Containers;Licenses;Metadata;Software;Security;Data mining","","7","","20","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Control and Data Flow in Security Smell Detection for Infrastructure as Code: Is It Worth the Effort?","R. Opdebeeck; A. Zerouali; C. De Roover","Vrije Universiteit Brussel, Brussels, Belgium; Vrije Universiteit Brussel, Brussels, Belgium; Vrije Universiteit Brussel, Brussels, Belgium",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","534","545","Infrastructure as Code is the practice of developing and maintaining computing infrastructure through executable source code. Unfortunately, IaC has also brought about new cyber attack vectors. Prior work has therefore proposed static analyses that detect security smells in Infrastructure as Code files. However, they have so far remained at a shallow level, disregarding the control and data flow of the scripts under analysis, and may lack awareness of specific syntactic constructs. These limitations inhibit the quality of their results. To address these limitations, in this paper, we present GASEL, a novel security smell detector for the Ansible IaC language. It uses graph queries on program dependence graphs to detect 7 security smells. Our evaluation on an oracle of 243 real-world security smells and comparison against two state-of-the-art security smell detectors shows that awareness of syntax, control flow, and data flow enables our approach to substantially improve both precision and recall. We further question whether the additional effort required to develop and run such an approach is justified in practice. To this end, we investigate the prevalence of indirection through control and data flow in security smells across more than 15 000 Ansible scripts. We find that over 55% of security smells contain data-flow indirection, and over 32% require a whole-project analysis to detect. These findings motivate the need for deeper static analysis tools to detect security vulnerabilities in IaC.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00079","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174011","Infrastructure as Code;Ansible;code smells;security;program dependence graph;empirical study","Codes;Source coding;Detectors;Static analysis;Syntactics;Software;Security","","13","","35","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Method Chaining Redux: An Empirical Study of Method Chaining in Java, Kotlin, and Python","A. M. Keshk; R. Dyer",University of Nebraska–Lincoln; University of Nebraska–Lincoln,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","546","557","There are possible benefits and drawbacks to chaining methods together, as is often done in fluent APIs. A prior study investigated how Java developers chain methods in over 2.7k open-source projects. That study observed, for the dataset analyzed, that the use of method chaining in Java is popular and seems to be increasing over time. That study however was limited to a smaller sample of Java projects, and it is also not clear if the results generalize to other languages. In this work, we first replicate the prior results by building a similar dataset and our own analysis scripts. We then extend those results by analyzing a much larger dataset of 89k Java projects and generalizing to other programming languages by analyzing 26k Kotlin projects and 98k Python projects. The results show chaining is more popular in Java and Kotlin than Python, chaining use in Kotlin is not growing, and Python sees more use in non-testing code.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00080","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174004","method chaining;empirical study;replication;Java;Kotlin;Python","Java;Codes;Buildings;Software;Data mining;Python","","3","","30","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Snapshot Testing Dataset","E. Bui; H. Rocha","Department of Computer Science, Loyola University Maryland, Baltimore, USA; Department of Computer Science, Loyola University Maryland, Baltimore, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","558","562","Snapshot testing is a form of software testing that is focused on visual components by highlighting any code changes when compared to a previously stored state. This quick and simple method of testing is growing popular among the industry with companies such as Spotify and Robinhood. Despite its growing popularity, snapshot testing is barely explored in academia. In this paper, we use GitHub API to collect a dataset of 686 repositories tagged with Jest, a popular testing framework capable of snapshot testing. From those repositories, we found 4,604 snapshot files and 11,367 test files. The top-10 repositories represent 20% of all snapshot files in the dataset, even though it is only 3% of the size. We acknowledge that improvements can be made in the dataset but due to the lack of data on snapshot testing, we believe the current dataset is useful in helping researchers to study this topic.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00081","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173958","snapshot testing;software testing;visual regression;dataset","Software testing;Industries;Visualization;Codes;Companies;Software;Data mining","","3","","14","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Large Language Models and Simple, Stupid Bugs","K. Jesse; T. Ahmed; P. T. Devanbu; E. Morgan","UC Davis, Davis, USA; UC Davis, Davis, USA; UC Davis, Davis, USA; UC Davis, Davis, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","563","575","With the advent of powerful neural language models, AI-based systems to assist developers in coding tasks are becoming widely available; Copilot is one such system. Copilot uses Codex, a large language model (LLM), to complete code conditioned on a preceding ""prompt"". Codex, however, is trained on public GitHub repositories, viz., on code that may include bugs and vulnerabilities. Previous studies [1], [2] show Codex reproduces vulnerabilities seen in training. In this study, we examine how prone Codex is to generate an interesting bug category, single statement bugs, commonly referred to as simple, stupid bugs or SStuBs in the MSR community. We find that Codex and similar LLMs do help avoid some SStuBs, but do produce known, verbatim SStuBs as much as 2x as likely than known, verbatim correct code. We explore the consequences of the Codex generated SStuBs and propose avoidance strategies that suggest the possibility of reducing the production of known, verbatim SStubs, and increase the possibility of producing known, verbatim fixes.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00082","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174227","language models;prompting;deep learning;software engineering","Training;Codes;Computer bugs;Production;Writing;Programming;Software","","29","","63","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"The ABLoTS Approach for Bug Localization: is it replicable and generalizable?","F. Niu; C. Mayr-Dorn; W. K. G. Assunção; L. Huang; J. Ge; B. Luo; A. Egyed","State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Institute for Software Systems Engineering, Johannes Kepler University, Linz, Austria; Institute for Software Systems Engineering, Johannes Kepler University, Linz, Austria; Department of Computer Science and Engineering, Southern Methodist University, Dallas, Texas, USA; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Institute for Software Systems Engineering, Johannes Kepler University, Linz, Austria",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","576","587","Bug localization is the task of recommending source code locations (typically files) that probably contain the cause of a bug and hence need to be changed to fix the bug. Along these lines, information retrieval-based bug localization (IRBL) approaches have been adopted, which identify the most bug-prone files from the source code space. In current practice, a series of state-of-the-art IRBL techniques leverage the combination of different components, e.g., similar reports, version history, code structure, to achieve better performance. ABLoTS is a recently proposed approach with the core component, TraceScore, that utilizes requirements and traceability information between different issue reports, i.e., feature requests and bug reports, to identify buggy source code snippets with promising results. To evaluate the accuracy of these results and obtain additional insights into the practical applicability of ABLoTS, supporting of future more efficient and rapid replication and comparison, we conducted a replication study of this approach with the original data set and also on an extended data set. The extended data set includes 16 more projects comprising 25,893 bug reports and corresponding source code commits. While we find that the TraceScore component as the core of ABLoTS produces comparable results with the extended data set, we also find that the ABLoTS approach no longer achieves promising results, due to an overlooked side effect of incorrectly choosing a cut-off date that led to training data leaking into test data with significant effects on performance.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00083","Natural Science Foundation of Jiangsu Province; Austrian Science Fund; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173939","bug localization;information retrieval;replication study","Location awareness;Codes;Source coding;Computer bugs;Training data;Focusing;Software","","1","","53","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"LLMSecEval: A Dataset of Natural Language Prompts for Security Evaluations","C. Tony; M. Mutas; N. E. D. Ferreyra; R. Scandariato","Institute of Software Security, Hamburg University of Technology, Germany; Institute of Software Security, Hamburg University of Technology, Germany; Institute of Software Security, Hamburg University of Technology, Germany; Institute of Software Security, Hamburg University of Technology, Germany",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","588","592","Large Language Models (LLMs) like Codex are powerful tools for performing code completion and code generation tasks as they are trained on billions of lines of code from publicly available sources. Moreover, these models are capable of generating code snippets from Natural Language (NL) descriptions by learning languages and programming practices from public GitHub repositories. Although LLMs promise an effortless NL-driven deployment of software applications, the security of the code they generate has not been extensively investigated nor documented. In this work, we present LLMSecEval, a dataset containing 150 NL prompts that can be leveraged for assessing the security performance of such models. Such prompts are NL descriptions of code snippets prone to various security vulnerabilities listed in MITRE’s Top 25 Common Weakness Enumeration (CWE) ranking. Each prompt in our dataset comes with a secure implementation example to facilitate comparative evaluations against code produced by LLMs. As a practical application, we show how LLMSecEval can be used for evaluating the security of snippets automatically generated from NL descriptions.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00084","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174231","LLMs;code security;NL prompts;CWE","Computer languages;Codes;Natural languages;Programming;Software;Security;Data mining","","15","","18","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Defectors: A Large, Diverse Python Dataset for Defect Prediction","P. Mahbub; O. Shuvo; M. Masudur Rahman",Dalhousie University; Dalhousie University; Dalhousie University,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","393","397","Defect prediction has been a popular research topic where machine learning (ML) and deep learning (DL) have found numerous applications. However, these ML/DL-based defect prediction models are often limited by the quality and size of their datasets. In this paper, we present Defectors, a large dataset for just-in-time and line-level defect prediction. Defectors consists of ≈ 213K source code files (≈ 93K defective and ≈ 120K defect- free) that span across 24 popular Python projects. These projects come from 18 different domains, including machine learning, automation, and internet-of-things. Such a scale and diversity make Defectors a suitable dataset for training ML/DL models, especially transformer models that require large and diverse datasets. We also foresee several application areas of our dataset including defect prediction and defect explanation.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00085","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174122","Defect Prediction;Just-in-Time;Dataset;Software Engineering","Training;Deep learning;Automation;Source coding;Predictive models;Transformers;Software","","7","","33","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"A Study of Gender Discussions in Mobile Apps","M. Shahin; M. Zahedi; H. Khalajzadeh; A. Rezaei Nasab","School of Computing Technologies, RMIT University, Melbourne, Australia; School of Computing and Information Systems, University of Melbourne, Melbourne, Australia; School of Information Technology, Deakin University, Melbourne, Australia; School of Electrical and Computer Engineering, Shiraz University, Shiraz, Iran",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","598","610","Mobile software apps (""apps"") are one of the prevailing digital technologies that our modern life heavily depends on. A key issue in the development of apps is how to design gender-inclusive apps. Apps that do not consider gender inclusion, diversity, and equality in their design can create barriers (e.g., excluding some of the users because of their gender) for their diverse users. While there have been some efforts to develop gender-inclusive apps, a lack of deep understanding regarding user perspectives on gender may prevent app developers and owners from identifying issues related to gender and proposing solutions for improvement. Users express many different opinions about apps in their reviews, from sharing their experiences, and reporting bugs, to requesting new features. In this study, we aim at unpacking gender discussions about apps from the user perspective by analysing app reviews. We first develop and evaluate several Machine Learning (ML) and Deep Learning (DL) classifiers that automatically detect gender reviews (i.e., reviews that contain discussions about gender). We apply our ML and DL classifiers on a manually constructed dataset of 1,440 app reviews from the Google App Store, composing 620 gender reviews and 820 non-gender reviews. Our best classifier achieves an F1-score of 90.77%. Second, our qualitative analysis of a randomly selected 388 out of 620 gender reviews shows that gender discussions in app reviews revolve around six topics: App Features, Appearance, Content, Company Policy and Censorship, Advertisement, and Community. Finally, we provide some practical implications and recommendations for developing gender-inclusive apps.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00086","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174058","Gender;Mobile App;App Review;Machine Learning;Deep Learning","Deep learning;Computer bugs;Companies;Software;Censorship;Mobile applications;Internet","","5","","87","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Tell Me Who Are You Talking to and I Will Tell You What Issues Need Your Skills","F. Santos; J. Penney; J. F. Pimentel; I. Wiese; I. Steinmacher; M. A. Gerosa","Northern Arizona University, Flagstaff, AZ, USA; Northern Arizona University, Flagstaff, AZ, USA; Northern Arizona University, Flagstaff, AZ, USA; Universidade Tecnológica Federal Do Paraná, Campo Mourão, PR, Brazil; Northern Arizona University, Flagstaff, AZ, USA; Northern Arizona University, Flagstaff, AZ, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","611","623","Selecting an appropriate task is challenging for newcomers to Open Source Software (OSS) projects. To facilitate task selection, researchers and OSS projects have leveraged machine learning techniques, historical information, and textual analysis to label tasks (a.k.a. issues) with information such as the issue type and domain. These approaches are still far from mainstream adoption, possibly because of a lack of good predictors. Inspired by previous research, we advocate that label prediction might benefit from leveraging metrics derived from communication data and social network analysis (SNA) for issues in which social interaction occurs. Thus, we study how these ""social metrics"" can improve the automatic labeling of open issues with API domains—categories of APIs used in the source code that solves the issue—which the literature shows that newcomers to the project consider relevant for task selection. We mined data from OSS projects’ repositories and organized it in periods to reflect the seasonality of the contributors’ project participation. We replicated metrics from previous work and added social metrics to the corpus to predict API-domain labels. Social metrics improved the performance of the classifiers compared to using only the issue description text in terms of precision, recall, and F-measure. Precision (0.922) increased by 15.82% and F-measure (0.942) by 15.89% for a project with high social activity. These results indicate that social metrics can help capture the patterns of social interactions in a software project and improve the labeling of issues in an issue tracker.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00087","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173992","Labels;Tags;Skills;Human Factors;Mining Software Repositories;Social Network Analysis;Open Source Software;Machine Learning","Measurement;Social networking (online);Source coding;Oral communication;Machine learning;Predictive models;Labeling","","9","","70","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"She Elicits Requirements and He Tests: Software Engineering Gender Bias in Large Language Models","C. Treude; H. Hata","The University of Melbourne, Australia; Shinshu University, Japan",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","624","629","Implicit gender bias in software development is a well-documented issue, such as the association of technical roles with men. To address this bias, it is important to understand it in more detail. This study uses data mining techniques to investigate the extent to which 56 tasks related to software development, such as assigning GitHub issues and testing, are affected by implicit gender bias embedded in large language models. We systematically translated each task from English into a genderless language and back, and investigated the pronouns associated with each task. Based on translating each task 100 times in different permutations, we identify a significant disparity in the gendered pronoun associations with different tasks. Specifically, requirements elicitation was associated with the pronoun “he” in only 6% of cases, while testing was associated with “he” in 100% of cases. Additionally, tasks related to helping others had a 91% association with “he” while the same association for tasks related to asking coworkers was only 52%. These findings reveal a clear pattern of gender bias related to software development tasks and have important implications for addressing this issue both in the training of large language models and in broader society.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00088","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174028","gender bias;large language models;software engineering","Training;Software;Data models;Data mining;Task analysis;Testing;Software engineering","","16","","30","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"GitHub OSS Governance File Dataset","Y. Yan; S. Frey; A. Zhang; V. Filkov; L. Yin",UC Davis; UC Davis; UW Seattle; UC Davis; UC Davis,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","630","634","Open-source Software (OSS) has become a valuable resource in both industry and academia over the last few decades. Despite the innovative structures they develop to support the projects, OSS projects and their communities have complex needs and face risks such as getting abandoned. To manage the internal social dynamics and community evolution, OSS developer communities have started relying on written governance documents that assign roles and responsibilities to different community actors.To facilitate the study of the impact and effectiveness of formal governance documents on OSS projects and communities, we present a longitudinal dataset of 710 GitHub-hosted OSS projects with GOVERNANCE.MD governance files. This dataset includes all commits made to the repository, all issues and comments created on GitHub, and all revisions made to the governance file. We hope its availability will foster more research interest in studying how OSS communities govern their projects and the impact of governance files on communities.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00089","National Science Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174145","","Industries;Documentation;Data collection;Data mining;Sustainable development;Open source software;Faces","","2","","30","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"State of Refactoring Adoption: Better Understanding Developer Perception of Refactoring","E. Abdullah AlOmar","Stevens Institute of Technology, Hoboken, NJ, USA",2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","635","639","We aim to explore how developers document their refactoring activities during the software life cycle. We call such activity Self-Affirmed Refactoring (SAR), which indicates developers’ documentation of their refactoring activities. SAR is crucial in understanding various aspects of refactoring, including the motivation, procedure, and consequences of the performed code change. After that, we propose an approach to identify whether a commit describes developer-related refactoring events to classify them according to the refactoring common quality improvement categories. To complement this goal, we aim to reveal insights into how reviewers decide to accept or reject a submitted refactoring request and what makes such a review challenging.Our SAR taxonomy and model can work with refactoring detectors to report any early inconsistency between refactoring types and their documentation. They can serve as a solid background for various empirical investigations. Our survey with code reviewers has revealed several difficulties related to understanding the refactoring intent and implications on the functional and non-functional aspects of the software. In light of our findings from the industrial case study, we recommended a procedure to properly document refactoring activities, as part of our survey feedback.","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00090","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174163","","Surveys;Codes;Taxonomy;Documentation;Detectors;Solids;Software","","","","31","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Author Index","",,2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR),"12 Jul 2023","2023","","","641","644","","2574-3864","979-8-3503-1184-6","10.1109/MSR59073.2023.00091","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174144","","","","","","","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
